[["Text data structures for working with paragraph content.", "", "&Fragment and &Paragraph are designed to be easily transformed and serialized", "using common tools. &Fragment *should* always be a pair-tuple, and &Paragraph a", "sequence of Fragments. The JSON/msgpack representation would likely be", "a sequence of sequences or a pair of sequences to be recombined.", "", "These text structure primitives are not ideal for managing fine grained formatting", "control. They are intended for managing semantic markup. However, &Fragment", "being arbitrarily typed allows for format control events that could be interpreted", "by a Processing Context for such a purpose."], ["An explicitly typed portion of text used as part of a &Paragraph."], ["Return the integer weight of the emphasized text.", "&None if the text is not emphasized."], ["Type string of the fragment.", "", "Usually a (character)`/` separated string where the first two fields", "are supposed to exist unconditionally. Common prefixes:", "", "- (id)`text/normal`", "- (id)`text/emphasis/[0-9]*`", "- (id)`reference/hyperlink`", "- (id)`referance/section`", "- (id)`reference/ambiguous`", "- (id)`reference/parenthetical`", "- (id)`literal/grave-accent`"], ["Initial path entry. Usually `reference`, `literal`, or `text`."], ["Create a new instance with an explicitly declared type."], ["A sequence of &Fragment instances forming a paragraph."], ["Variable argument based &Paragraph constructor."], ["Return the first and only fragment of the Paragraph.", "If multiple fragments exist, a &ValueError is raised."], ["Iterator producing lists that contain the sentence contents.", "A sentence in a paragraph is delimited by (character)`.` contained", "within `'text'`"]]