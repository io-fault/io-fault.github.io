! CONTROL:
	/type/
		module
	/element/
		- (control)`property-set`
		- (source/area)`1 1 244 0`
- (project-local/unknown)&<factory>

polynomial-1 materialization checks.


[ module ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`6 1 6 40`

[ types ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`7 1 7 28`

[ files ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`8 1 8 27`

[ Segment ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`9 1 9 34`

[ structure_project_declaration ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`11 1 11 59`

[ s_information ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`13 1 18 1`
#!source
	s_information = types.Information(
		identifier = 'http://sample.fault.io/corpus/project',
		name = 'project',
		authority = 'fault.io',
		contact = 'http://fault.io/critical',
	)

[ s_formats ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`20 1 30 1`
#!source
	s_formats = {
		'http://if.fault.io/factors/meta': [
			('chapter', 'txt', 'fault-1', 'kleptic'),
		],
		'http://if.fault.io/factors/system': [
			('elements', 'c', '2011', 'c'),
		],
		'http://if.fault.io/factors/python': [
			('module', 'py', 'psf-v3', 'python'),
		],
	}

[ test_Composition_indirect ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`32 1 40 33`
(signature)`test_Composition_indirect(test)`

- (context-local/factor-element)&<fault.project/factory#Composition.indirect[fault.project.factory.Composition.indirect]>


[ test_Composition_explicit ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`42 1 58 49`
(signature)`test_Composition_explicit(test)`

- (context-local/factor-element)&<fault.project/factory#Composition.explicit[fault.project.factory.Composition.explicit]>


[ check_information ]
! CONTROL:
	/type/
		function
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`60 1 62 19`
(signature)`check_information(test, original, serialized)`


[ test_plan_information ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`64 1 71 54`
(signature)`test_plan_information(test)`

- (context-local/factor-element)&<fault.project/factory#plan[fault.project.factory.plan]>

Check that serialized project information is consistent.


[ test_plan_cell_factors ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`73 1 84 36`
(signature)`test_plan_cell_factors(test)`

- (context-local/factor-element)&<fault.project/factory#plan[fault.project.factory.plan]>

Check that plan produces a suffixed path for an indirectly typed factor
when given a Cell as the source list.


[ test_plan_explicitly_typed_factors ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`86 1 97 42`
(signature)`test_plan_explicitly_typed_factors(test)`

- (context-local/factor-element)&<fault.project/factory#plan[fault.project.factory.plan]>


[ test_plan_explicitly_typed_symbols ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`99 1 118 74`
(signature)`test_plan_explicitly_typed_symbols(test)`

- (context-local/factor-element)&<fault.project/factory#plan[fault.project.factory.plan]>

Check that symbols are stored and are retrievable.


[ S ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`120 1 120 25`
#!source
	S = Segment.from_sequence

[ test_materialize_mkdir ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`122 1 128 47`
(signature)`test_materialize_mkdir(test)`

- (context-local/factor-element)&<fault.project/factory#materialize[fault.project.factory.materialize]>


[ test_materialize_link ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`130 1 139 61`
(signature)`test_materialize_link(test)`

- (context-local/factor-element)&<fault.project/factory#materialize[fault.project.factory.materialize]>


[ test_materialize_module ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`141 1 152 51`
(signature)`test_materialize_module(test)`

- (context-local/factor-element)&<fault.project/factory#materialize[fault.project.factory.materialize]>


[ test_materialize_bytes ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`154 1 160 58`
(signature)`test_materialize_bytes(test)`

- (context-local/factor-element)&<fault.project/factory#materialize[fault.project.factory.materialize]>


[ test_materialize_strings ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`162 1 168 52`
(signature)`test_materialize_strings(test)`

- (context-local/factor-element)&<fault.project/factory#materialize[fault.project.factory.materialize]>


[ test_Parameters_instantiate ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`170 1 183 85`
(signature)`test_Parameters_instantiate(test)`

- (context-local/factor-element)&<fault.project/factory#Parameters.instantiate[fault.project.factory.Parameters.instantiate]>


[ test_Parameters_instantiate_dimensions ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`185 1 201 33`
(signature)`test_Parameters_instantiate_dimensions(test)`

- (context-local/factor-element)&<fault.project/factory#Parameters.instantiate[fault.project.factory.Parameters.instantiate]>

Validate that dimensions is forwarded by instantiate.


[ test_Parameters_define ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`203 1 231 2`
(signature)`test_Parameters_define(test)`

- (context-local/factor-element)&<fault.project/factory#Parameters.define[fault.project.factory.Parameters.define]>


[ test_Parameters_define_index_error ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`233 1 244 30`
(signature)`test_Parameters_define_index_error(test)`

- (context-local/factor-element)&<fault.project/factory#Parameters.define[fault.project.factory.Parameters.define]>

