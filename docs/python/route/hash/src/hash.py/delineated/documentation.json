[["Hash path implementation for compressing file paths."], ["Hash implementation container providing division logic for constructing", "the path segment to be used by a resource's key."], ["Split the hex digest into parts for building a Route to the bucket."], ["Hash the given key with the configured algorithm returning the divided digest."], ["Return a tuple consisting of the algorithm identifier, the number", "of divisions, and the character length of the hex digest."], ["Create an instance using the identity."], ["A bucket index for &Directory resources.", "", "Manages the sequence of entries for a bucket.", "", "The index files are a series of entry identifiers followed", "by the key on a greater indentation level; the trailing newline", "of each indentation block not being part of the key."], ["Structure the indentation blocks into (key, entry) pairs.", "The keys are the indented section and the entries are the leading", "unindented identifier.", "", "Trailing newlines *MUST* be present.", "Structure presumes that the index file was loaded using readlines.", "", "Entries (unindented areas) must be a single line followed by one", "or more indented lines. The initial indentation level (first tab)", "will be remove; the content will be considered to be the continuation", "of the key (that's hashed to select this bucket's index).", "", "Underscore attributes are representations of stored data."], ["Load the index from the given line sequence.", "&lines items *must* have trailing newlines."], ["Send the serialized index state to the given &write function."], ["Iterator containing the keys loaded from the index."], ["Check if a key exists in the index."], ["Allocate a sequence of entries for the given keys."], ["Insert the key into the bucket. The key *must* not already be present."], ["Delete the key from the index returning the entry for removal."], ["Filesystem based hash tree.", "", "[ Properties ]", "", "/addressing/", "\tThe address resolution method. Usually a &Segmentation instance.", "/path/", "\tThe route to the resource that contains the tree."], ["Returns an iterator to all the keys and their associated routes."], ["Allocate a position for the given &key and return its route.", "", "If already allocated, return the reference to the resource."], ["Whether the resource has not been allocated.", "", "&True when &key has *not* been associated with a resource."], ["Release the allocated resource associated with the &key and delete it from the index."]]