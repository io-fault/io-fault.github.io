! CONTROL:
	/type/
		module
	/element/
		- (control)`property-set`
		- (source/area)`1 1 234 0`
Data structures for holding failure, notification, and trace information.

[ Constructor Versioning ]

The class methods of the types here are given version numbers. New versions of methods
can be introduced at any time without the immediate or eventual depcrecation of older versions.
Generally, they should be usable into perpetuity aside from some unforeseen exception and in
such a case, deprecation warnings will be used prior to their removal.


[ typing ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`11 1 11 13`

[ Mapping ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`12 1 12 35`

[ EStruct ]
! CONTROL:
	/type/
		class
	/element/
		- (control)`property-set`
		- (source/area)`14 1 176 56`
! INHERIT:
	- (control)`property-set`
	- (source/area)`14 15 14 19`
	- (type/syntax)`tuple`
	- (type/invalid/unknown)&<#tuple>
	
Structure holding a snapshot of core information regarding an event that is likely to be
displayed to a user or emitted to a log. While this has been generalized to identify events,
it's name was chosen to lend to its suitability for errors.

Fields can be omitted, but instances should contain as much information as possible.
(factor-local/class)&<#EStruct[EStruct]> instances are snapshots that may be serialized prior to formatting, so
instances should be made with the consideration that the final endpoint may not
have access to more advanced formatting routines.


[ EStruct >> __slots__ ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`25 2 25 15`
#!source
	__slots__ = ()

[ EStruct >> __repr__ ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`27 2 30 10`
		- (type/syntax)`str`
		- (type/invalid/unknown)&<#str>
		
(signature)`__repr__(self)`


[ EStruct >> protocol ]
! CONTROL:
	/type/
		property
	/element/
		- (control)`property-set`
		- (source/area)`31 2 47 10`
		- (type/syntax)`str`
		- (type/invalid/unknown)&<#str>
		
The IRI or symbol identifying the set of events that this instance belongs to.
The authority specifying the semantics and metadata of the event.

If the IRI is real, it should contain routing information that will
provide aid in properly formatting the event information. If the IRI is not real,
the application processing the event should have formatting rules available.

Symbolic identifiers can be used, but should normally map to a IRI
prior to serialization.

This field *must not* be localized.


[ EStruct >> identifier ]
! CONTROL:
	/type/
		property
	/element/
		- (control)`property-set`
		- (source/area)`48 2 66 10`
		- (type/syntax)`str`
		- (type/invalid/unknown)&<#str>
		
A string unambiguously identifying the event.
Also recognized as the preferred string representation of (factor-local/property)&<#EStruct.code[code]> that can identify the event.
Formally referred to as "String Identifier".

This must *not* be the symbolic name assigned to the (factor-local/property)&<#EStruct.code[code]>.
For instance, the POSIX errno define (id)`EINTR` should be considered a (factor-local/property)&<#EStruct.symbol[symbol]>,
not an (factor-local/property)&<#EStruct.identifier[identifier]>.

For events with integer identifiers, this is normally the decimal representation string.
If the (factor-local/property)&<#EStruct.protocol[protocol]> commonly refers to a different representation for the (factor-local/property)&<#EStruct.code[code]>,
then that string representation should used instead of the decimal string.

This field *must not* be localized.


[ EStruct >> code ]
! CONTROL:
	/type/
		property
	/element/
		- (control)`property-set`
		- (source/area)`67 2 86 10`
		- (type/syntax)`int`
		- (type/invalid/unknown)&<#int>
		
The integer form of the (factor-local/property)&<#EStruct.identifier[identifier]> or zero if none exists.
Formally referred to as "Integer Code".

Often, this is redundant with the (factor-local/property)&<#EStruct.identifier[identifier]> field aside from the data type.

However, when the event's integer code is not normally presented or referenced to in
decimal form, the redundancy allows the use of the proper form without having
knowledge of the routine used to translate between the integer code and the usual
string representation. SQL state codes being a notable example where having
both forms might have some benefit during reporting.

A value of zero *should* indicate that there is no integer form;
normally, using the (factor-local/property)&<#EStruct.identifier[identifier]> is the preferred key when
resolving additional metadata regarding the event.


[ EStruct >> symbol ]
! CONTROL:
	/type/
		property
	/element/
		- (control)`property-set`
		- (source/area)`87 2 102 10`
		- (type/syntax)`str`
		- (type/invalid/unknown)&<#str>
		
The symbolic name, label, or title used to identify the event.

Often, a class name. This is distinct from (invalid/unknown)&<#identifer> and (factor-local/property)&<#EStruct.code[code]> in that
it is usually how the (factor-local/property)&<#EStruct.identifier[identifier]> was originally selected. For instance,
for a POSIX system error, errno, this might be (id)`EAGAIN` or (id)`EINTR`.

In cases where an error is being represented that has a formless (factor-local/property)&<#EStruct.protocol[protocol]>,
the symbol may be the only field that can be used to identify the event.

This field *must not* be localized.


[ EStruct >> abstract ]
! CONTROL:
	/type/
		property
	/element/
		- (control)`property-set`
		- (source/area)`103 2 121 13`
		- (type/syntax)`str`
		- (type/invalid/unknown)&<#str>
		
Single sentence message describing the event.
Often a constant string defined by the (factor-local/property)&<#EStruct.protocol[protocol]>, but potentially
overridden by the application.

This field may be localized, but it is preferrable to use a consistent
language that is common to the majority of the application's users.

There is the potential that the (factor-local/property)&<#EStruct.protocol[protocol]> can be used to resolve
a formatting routine for the display such that this message will not be shown.

This field should *not* contain formatting codes.
For high-level descriptions, the adapters implemented by a Reporting Pipeline
should be used to create friendlier, human-readable abstracts.


[ EStruct >> from_fields_v1 ]
! CONTROL:
	/type/
		classmethod
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`122 2 131 13`
(signature)`from_fields_v1(Class, protocol)`


[ EStruct >> from_tuple_v1 ]
! CONTROL:
	/type/
		classmethod
	/element/
		- (control)`property-set`
		- (source/area)`132 2 144 13`
(signature)`from_tuple_v1(Class, fields)`

Create an instance using (factor-local/parameter)&<#EStruct.from_tuple_v1.Parameters.fields[fields]>; expects five objects in this order:

# Protocol as a string.
# String Identifier of Event.
# Integer Code of Event.
# Symbol String.
# Abstract Paragraph.


[ EStruct >> from_arguments_v1 ]
! CONTROL:
	/type/
		classmethod
	/element/
		- (control)`property-set`
		- (source/area)`145 2 152 13`
(signature)`from_arguments_v1(Class, protocol, identifier, code, symbol, abstract)`

Create an instance using the given arguments whose positioning is consistent
with where the fields are stored in the tuple.


[ EStruct >> from_string_v1 ]
! CONTROL:
	/type/
		classmethod
	/element/
		- (control)`property-set`
		- (source/area)`153 2 176 56`
(signature)`from_string_v1(Class, erstring)`

Create an EStruct using a string following the format:
(illustration)`SYMBOL[str-id int-code]: Abstract`.

The protocol keyword can be used to designate the (factor-local/parameter)&<#EStruct.from_string_v1.Parameters.protocol[protocol]> field.


[ Frame ]
! CONTROL:
	/type/
		class
	/element/
		- (control)`property-set`
		- (source/area)`178 1 234 43`
! INHERIT:
	- (control)`property-set`
	- (source/area)`178 13 178 17`
	- (type/syntax)`tuple`
	- (type/invalid/unknown)&<#tuple>
	
A status frame designating a serializable event and associated context.


[ Frame >> __slots__ ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`182 2 184 10`
#!source
	__slots__ = ()
		@property

[ Frame >> f_protocol ]
! CONTROL:
	/type/
		property
	/element/
		- (control)`property-set`
		- (source/area)`185 2 191 10`
		- (type/syntax)`str`
		- (type/invalid/unknown)&<#str>
		
The event's protocol.


[ Frame >> f_channel ]
! CONTROL:
	/type/
		property
	/element/
		- (control)`property-set`
		- (source/area)`192 2 198 10`
		- (type/syntax)`str`
		- (type/invalid/unknown)&<#str>
		
The channel designated by the frame.


[ Frame >> f_event ]
! CONTROL:
	/type/
		property
	/element/
		- (control)`property-set`
		- (source/area)`199 2 205 10`
		- (type/syntax)`EStruct`
		- (type/factor-local/class)&<#EStruct[EStruct]>
		
The qualified identification of the frame event.


[ Frame >> f_extension ]
! CONTROL:
	/type/
		property
	/element/
		- (control)`property-set`
		- (source/area)`206 2 212 10`
		- (type/syntax)`Mapping[str, str]`
		
The data extension associated with the frame.


[ Frame >> f_image ]
! CONTROL:
	/type/
		property
	/element/
		- (control)`property-set`
		- (source/area)`213 2 219 13`
		- (type/syntax)`str`
		- (type/invalid/unknown)&<#str>
		
The visible message of the status frame.


[ Frame >> from_string_v1 ]
! CONTROL:
	/type/
		classmethod
	/element/
		- (control)`property-set`
		- (source/area)`220 2 229 13`
(signature)`from_string_v1()`

Create using an (factor-local/class)&<#EStruct[EStruct]> string and optional context.


[ Frame >> from_event_v1 ]
! CONTROL:
	/type/
		classmethod
	/element/
		- (control)`property-set`
		- (source/area)`230 2 234 43`
(signature)`from_event_v1(Class, event)`

Create using an (factor-local/class)&<#EStruct[EStruct]> instance and optional context.

