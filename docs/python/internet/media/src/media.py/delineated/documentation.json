[["Mime Type structures and parsers for content types and media ranges.", "", "Interfaces here work exclusively with character-strings; wire data must be decoded.", "", "[ References ]", "", "\t- &<http://tools.ietf.org/html/rfc6838>", "", "[ Properties ]", "", "/types/", "\tA mapping of type names and file extensions to MIME type strings.", "/filename_extensions/", "\tA mapping of filename extensions to type name.", "/iana_registered_types/", "\tThe IRI of the set of media types registered with IANA.", "", "[ Functions ]", "", "/type_from_string/", "\tConstruct a &Type instance from a MIME type string.", "", "\tCode:", "\t#!/pl/python", "\t\tfrom fault.internet import media", "\t\tmt = media.type_from_string(\"text/xml\")", "", "\tEquivalent to &Type.from_string, but cached.", "/range_from_string/", "\tConstruct a &Range instance from a Media Range string like an Accept header.", "", "\tEquivalent to &Range.from_string, but cached."], ["Identify the MIME type from a filename using common file extensions.", "", "Unidentified extensions will likely return application/octets-stream."], ["An IANA Media Type; the Content-Type, Subtype, and options triple describing", "the type of data.", "", "A container interface (`in`) is provided in order to identify if a given", "type is considered to be within another:", "", "\t- `text/html in */*`", "\t- `text/html in text/*`", "\t- `text/html;level=1 in text/html`", "\t- `text/html not in text/html;level=1`", "", "The &from_string classmethod is the common constructor."], ["Content Type; usually one of:", "", "\t- `application`", "\t- `text`", "\t- `image`", "\t- `video`", "\t- `model`", "", "The initial part of a MIME (media) type."], ["Subtype; the specific form of the &cotype."], ["Parameters such as charset for encoding designation."], ["Whether the &Type is a pattern and can match multiple types."], ["Return a new &Type with the given &subtype appended to the instance's &.subtype."], ["Return a new &Type with the last '+'-delimited subtype removed. (inverse of push)."], ["Split on the ';' and '/' separators and build an instance.", "", "Additional parameters or overrides may be given using keywords."], ["Split on the ';' and '/' separators and build an instance.", "", "Additional parameters or overrides may be given using keywords."], ["Media Range class for supporting Accept headers.", "", "Ranges are a mapping of content-types to an ordered sequence of subtype sets.", "The ordering of the subtype sets indicates the relative quality.", "", "Querying the range for a set of types will return the types with the", "highest precedence for each content type.", "", "&None is used to represent any types, (text)`*`."], ["Construct triples describing the &media_range."], ["Instantiate the Range from a string."], ["Instantiate the Range from a bytes object; decoded and passed to &from_string."], ["Search for a single MIME type in the range.", "Return identified quality of the type.", "", "The quality of a particular type is useful in cases where the", "server wants to give some precedence to another type.", "Given that the client accepts XML, but it is a lower quality than HTML,", "the server may want to send XML anyways."], ["Given a sequence of mime types, return the best match", "according to the qualities recorded in the range."]]