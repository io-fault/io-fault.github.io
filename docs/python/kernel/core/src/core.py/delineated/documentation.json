[["Core data types and classes."], ["An object whose purpose is to join the completion of multiple", "processors into a single event. Joins are used to simplify coroutines", "whose progression depends on a set of processors instead of one.", "", "Joins also enable interrupts to trigger completion events so that", "failures from unrelated Sectors can be communicated to callback.", "", "[ Properties ]", "", "/dependencies/", "\tThe original set of processors as a dictionary mapping", "\tgiven names to the corresponding &Processor.", "", "/pending/", "\tThe current state of pending exits that must", "\toccur prior to the join-operation's completion.", "", "/callback/", "\tThe callable that is performed after the &pending", "\tset has been emptied; defined by &atexit."], ["Initialize the join with the given &processor set."], ["Connect the &Processor.atexit calls of the configured", "&dependencies to the &Join instance."], ["Return an iterator to the configured dependencies."], ["Get the dependency the given identifier."], ["Record the exit of the given &processor and execute", "the &callback of the &Join if the &processor is the last", "in the configured &pending set."], ["Assign the callback of the &Join.", "", "If the &pending set is empty, the callback will be immediately executed,", "otherwise, overwrite the currently configured callback.", "", "The &callback is executed with the &Join instance as its sole parameter.", "", "[ Parameters ]", "", "/callback/", "\tThe task to perform when all the dependencies have exited."], ["A *reference* to a logical expression or logical function.", "", "Conditional references are constructed from a subject object, attribute path, and parameters.", "Used to clearly describe the objects that participate in a logical conclusion of interest.", "", "Used by &Flow instances to describe the condition in which an obstruction is removed.", "Conditions provide introspecting utilities the capacity to identify the cause of", "an obstruction."], ["[ Parameters ]", "/focus/", "\tThe root object that is safe to reference", "/path/", "\tThe sequence of attributes to resolve relative to the &focus.", "/parameter/", "\tDetermines the condition is a method and should be given this", "\tas its sole parameter. &None indicates that the condition is a property."], ["Exception associated with an interface supporting the sequencing of processor trees."], ["A resource that maintains an arbitrary state.", "", "State Transition Sequence.", "", "\t# Instantiated", "\t# Actuated", "\t# Functioning", "\t# Terminating", "\t# Terminated", "", "Where the functioning state designates that the implementation specific state", "has been engaged. Often, actuation and termination intersect with implementation states.", "", "The interrupted state is special; its used as a frozen state of the machine and is normally", "associated with an exception. The term interrupt is used as it is nearly analogous with UNIX", "process interrupts (unix.signal)`SIGINT`."], ["Return the full sector stacks of the processor."], ["Whether the processor has been actuated, normally within a Sector."], ["Whether the processor has started terminate."], ["Whether the processor has been terminated."], ["Whether or not the Processor is functioning.", "Indicates that the processor was actuated and is neither terminated nor interrupted.", "", "! NOTE:", "\tProcessors are functioning *during* termination; instances where", "\t`Processor.terminating == True`.", "\tTermination may cause limited access to functionality, but", "\tare still considered functional."], ["Initialize the Processor for use within the controlling Sector.", "", "Initialization method called after a &Processor has been given execution context.", "&Processor.actuate performs no actions and does not need to be called when", "overridden."], ["Terminate the Processor using &interrupt and exit."], ["Signal the Processor that the controlling Sector has been interrupted,", "and all processing of events should cease immediately.", "", "Subclasses that need to perform disconnects or cancellations should", "implement this method in order to ensure that event processing stops.", "However, interrupt procedures will automatically rewrite the &process", "method to perform a no-op if invoked, so carefully written subclasses", "may not have to perform any tasks at all."], ["Note the given exception as an error on the &Processor.", "Exceptions identified as errors cause the &Processor to exit.", "", "Called internally when a task associated with a Processor raises", "an exception. The controlling Sector will be interrupted and the", "faulting Processor identified for subsequent scrutiny."], ["Enqueue a task associated with the sector so that exceptions cause the sector to", "fault. This is the appropriate way for &Processor instances controlled by a sector", "to sequence processing."], ["Exit the processor by signalling the controlling processor that termination", "has completed."], ["Provides the structure stack with at-exit callbacks."], ["Define the set index to use when dispatched by a &Sector.", "", "By default, &Sector instances place &Processor instances into", "&set objects that stored inside a dictionary. The index used", "for placement is allowed to be overridden in order to optimize", "the groups and allow better runtime introspection."], ["Terminate the processor &self, but reassign the exit hooks to be performed", "when the given &processor exits. &processor will be dispatched into the controlling", "sector."], ["A processing sector; manages a set of &Processor resources according to their class.", "Termination of a &Sector is solely dependent whether or not there are any", "&Processor instances within the &Sector.", "", "Sectors are the primary &Processor class and have protocols for managing projections", "of entities (users) and their authorizing credentials.", "", "[ Properties ]", "", "/processors/", "\tA divided set of abstract processors currently running within a sector.", "\tThe sets are divided by their type inside a &collections.defaultdict.", "", "/exits/", "\tSet of Processors that are currently exiting.", "\t&None if nothing is currently exiting."], ["Actuate the Sector by actuating its processors.", "There is no guarantee to the order in which the controlled", "processors are actuated.", "", "Exceptions that occur during actuation fault the Sector causing", "the *controlling sector* to exit. If faults should not cause", "the parent to be interrupted, they *must* be dispatched after", "&self has been actuated."], ["Interrupt the Sector by interrupting all of the subprocessors.", "The order of interruption is random, and *should* be insignificant."], ["Sector structure exit handler.", "", "Called when a Processor has reached termination and should no longer", "be contained within the Sector."], ["Dispatch the given &processor inside the Sector.", "", "Returns the given processor."], ["Empty the exit set and check for sector completion."], ["Called once the set of exited processors has been reaped", "in order to identify if the Sector should notify the", "controlling Sector of an exit event.."], ["Use &Interface.if_sector_placement if the sector has an Interface.", "Otherwise, &Sector."], ["The base class for &Transaction Context processors.", "", "Subclasses define the initialization process of a Transaction", "and the structures used to provide depending processors with the", "necessary information for performing their tasks.", "", "[ Namespaces ]", "Context Processors employ two hard namespaces in its methods.", "The `xact_ctx_` and the `xact_`. Methods and properties", "that exist under `xact_ctx_` refer to generic Context operations", "whereas `xact_` refers to operations that primary effect the", "&Transaction sector containing the context."], ["Export &self as a named context inherited by all descending processors."], ["Whether the Transaction has any processors aside from the Context."], ["Check for processors other than &self, if there are none, exit the transaction."], ["The complete context stack of the &Transaction excluding &self.", "First entry is nearest to &self; last is furthest ascent."], ["Dispatch the given &processor into the &Transaction."], ["Called when the Transaction Context has been fully initialized with respect to", "the proposed event set determined by actuation."], ["Subtransaction &xact exited."], ["All subtransactions exited; &xact was final.", "Defaults to termination of the context and transaction exit."], ["Update Transaction Context callbacks to null operations.", "", "Sets &interrupted to &True and should be called by subclasses if overridden."], ["A &Sector with Execution Context.", "", "Transactions are sectors with a single &Context instance that is used to manage", "the state of the Sector. Regular Sectors exit when all the processors are shutdown,", "and Transactions do too. However, the &Context is the controlling processor and", "must be the last to exit.", "", "[ Properties ]", "", "/xact_context/", "\tThe Processor that will be dispatched to initialize the Transaction", "\tSector and control its effect. Also, the receiver of &Processor.terminate."], ["Create a &Transaction sector with the given &Context initializaed", "as the first Processor to be actuated.", "", "This is the appropriate way to instantiate &Transaction instances"], ["Whether the Transaction's context, &xact_context, is an instance of the given &ContextClass."], ["Invoke the &Context.terminate method of the &xact_context property.", "The termination of the Transaction is managed entirely by the Context."], ["Define the set index to use when dispatched by a &Sector.", "", "By default, &Sector instances place &Processor instances into", "&set objects that stored inside a dictionary. The index used", "for placement is allowed to be overridden in order to optimize", "the groups and allow better runtime introspection."], ["The set of subtransactions currently running."], ["Transaction sequence created from an invocation.", "", "[ Properties ]", "", "/exe_identifier/", "\tA, usually, unique identifier for the executable.", "\tThe transaction context that the executable is dispatched within determines", "\tany constraints, if any.", "/exe_invocation/", "\tThe primary set of parameters used by the executable.", "/exe_faults/", "\tThe set of sectors that were faulted within the context; usually keyed by", "\tthe identifier of the processor that was blamed.", "/exe_faults_count/", "\tThe total number of faults that occurred. In cases where faults have been", "\tpurged from &exe_faults, the count allows recognition of the purge.", "/exe_queue/", "\tThe transactions to be executed in order to complete execution."], ["Consume the next transaction in the queue."], ["Execute the enqueued transaction or cause the executable to exit."], ["Place the sector into the faults directory using the hex identifier", "as its name."], ["Transaction sequence created from a predefined sequence of &Context instances.", "", "Subtransactions are dispatched in order and *terminated in reverse order*."]]