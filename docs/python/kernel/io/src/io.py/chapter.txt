! CONTROL:
	/type/
		module
	/element/
		- (control)`property-set`
		- (source/area)`1 1 460 0`
I/O Transaction Contexts for managing transfers and protocol transports.

I/O is managed using three types: (factor-local/class)&<#Transfer[Transfer]>, (factor-local/class)&<#Transport[Transport]>, and (factor-local/class)&<#Interface[Interface]>.
(factor-local/class)&<#Transfer[Transfer]> is the Transaction that manages the flows supporting a bidirectional or unidirecitonal
stream.


[ typing ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`8 1 8 13`

[ itertools ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`9 1 9 16`

[ functools ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`10 1 10 16`

[ weakref ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`11 1 11 14`

[ core ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`13 1 13 18`

[ flows ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`14 1 14 19`

[ Transfer ]
! CONTROL:
	/type/
		class
	/element/
		- (control)`property-set`
		- (source/area)`16 1 88 21`
! INHERIT:
	- (control)`property-set`
	- (source/area)`16 16 16 27`
	- (type/syntax)`core.Context`
	- (type/project-local/factor-element)&<core#Context[fault.kernel.core.Context]>
	
Context managing a *single* sequence of (project-local/factor-element)&<flows#Channel[fault.kernel.flows.Channel]> instances.


[ Transfer >> actuate ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`21 2 22 26`
(signature)`actuate(self)`


[ Transfer >> _io_start ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`24 2 26 10`
#!source
	_io_start = None
		@property

[ Transfer >> io_complete ]
! CONTROL:
	/type/
		property
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`27 2 28 44`
		- (type/syntax)`bool`
		- (type/invalid/unknown)&<#bool>
		

[ Transfer >> io_flow ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`30 2 54 12`
		- (type/syntax)`flows.Terminal`
		- (type/project-local/factor-element)&<flows#Terminal[fault.kernel.flows.Terminal]>
		
(signature)`io_flow(self, series)`

Connect a sequence of (project-local/factor-element)&<flows#Channel[fault.kernel.flows.Channel]> instances to a new (project-local/factor-element)&<flows#Terminal[fault.kernel.flows.Terminal]>
instance that signals the (factor-local/class)&<#Transfer[Transfer]> when the Flow has completed.

The (project-local/factor-element)&<flows#Terminal[fault.kernel.flows.Terminal]> created and dispatched will be returned and the (factor-local/class)&<#Transfer[Transfer]> flow
count will be incremented.


[ Transfer >> io_execute ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`56 2 60 35`
(signature)`io_execute(self)`

Signal the first (project-local/factor-element)&<flows#Channel[fault.kernel.flows.Channel]> that it should begin performing transfers.


[ Transfer >> io_terminate ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`62 2 69 22`
(signature)`io_terminate(self)`

Explicitly terminate the managed flow.


[ Transfer >> _io_check_terminate ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`71 2 73 28`
(signature)`_io_check_terminate(self)`


[ Transfer >> _io_transfer_terminated ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`76 2 81 40`
(signature)`_io_transfer_terminated(self, terminal)`

Complete the termination of the transfer.


[ Transfer >> terminate ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`83 2 88 21`
(signature)`terminate(self)`


[ Invocations ]
! CONTROL:
	/type/
		class
	/element/
		- (control)`property-set`
		- (source/area)`90 1 189 32`
! INHERIT:
	- (control)`property-set`
	- (source/area)`90 19 90 32`
	- (type/syntax)`core.Processor`
	- (type/project-local/factor-element)&<core#Processor[fault.kernel.core.Processor]>
	
Dispatch processor for (factor-local/class)&<#Transport[Transport]> instances.


[ Invocations >> __init__ ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`95 2 99 28`
(signature)`__init__(self, catenate, router)`


[ Invocations >> actuate ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`101 2 102 75`
(signature)`actuate(self)`


[ Invocations >> terminate ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`104 2 105 27`
(signature)`terminate(self)`


[ Invocations >> i_receive_closed ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`107 2 108 16`
(signature)`i_receive_closed(self)`


[ Invocations >> i_dispatch ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`110 2 118 31`
(signature)`i_dispatch(self, events)`


[ Invocations >> i_update ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`120 2 124 24`
(signature)`i_update(self, router)`

Update the router used to facilitate a protocol transaction.


[ Invocations >> i_signal ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`126 2 131 28`
(signature)`i_signal(self)`

Method enqueued by (invalid/unknown)&<#f_transfer> to flush the protocol transaction queue.
Essentially, an internal method.


[ Invocations >> i_close ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`133 2 134 46`
(signature)`i_close(self)`


[ Invocations >> _i_transition ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`136 2 140 11`
(signature)`_i_transition(self)`


[ Invocations >> i_accept ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`142 2 162 21`
(signature)`i_accept(self)`

Accept a sequence of requests from a client configured remote endpoint.
Routes the initiation parameter with callbacks to connect input and output.

Used by routers employed by servers to get protocol transactions.


[ Invocations >> i_correlate ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`164 2 173 29`
(signature)`i_correlate(self)`

Received a set of responses. Join with requests, and
execute the receiver provided by the enqueueing operation.

Used by routers employed by clients to get the response of a protocol transaction.


[ Invocations >> i_allocate ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`175 2 189 32`
(signature)`i_allocate(self)`

Allocate a channel for submitting a request.

Returns the channel identifier that will be used and the callback to submit the
initiate parameter and upstream channel.


[ Transport ]
! CONTROL:
	/type/
		class
	/element/
		- (control)`property-set`
		- (source/area)`191 1 334 44`
! INHERIT:
	- (control)`property-set`
	- (source/area)`191 17 191 28`
	- (type/syntax)`core.Context`
	- (type/project-local/factor-element)&<core#Context[fault.kernel.core.Context]>
	
The Transaction Context that manages the stack of protocols
used to facilitate arbitrary I/O streams.


[ Transport >> actuate ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`197 2 198 6`
(signature)`actuate(self)`


[ Transport >> __init__ ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`200 2 208 13`
(signature)`__init__(self)`


[ Transport >> from_endpoint ]
! CONTROL:
	/type/
		classmethod
	/element/
		- (control)`property-set`
		- (source/area)`209 2 219 13`
(signature)`from_endpoint(Class, io)`

Create and initialize an instance with the first transport layer.


[ Transport >> from_stack ]
! CONTROL:
	/type/
		classmethod
	/element/
		- (control)`property-set`
		- (source/area)`220 2 225 30`
(signature)`from_stack(Class, entries)`

Create and initialize an instance with using a stack.


[ Transport >> xact_void ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`227 2 229 18`
(signature)`xact_void(self, xact)`


[ Transport >> tp_extend ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`231 2 243 13`
(signature)`tp_extend(self, entries)`

Extend the transport stack with multiple intermediates.
This method should only be used prior to (factor-local/method)&<#Transport.tp_connect[tp_connect]>.


[ Transport >> tp_append ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`245 2 253 13`
(signature)`tp_append(self, protocol)`

Extend the transport stack with a single intermediate.
This method should only be used prior to (factor-local/method)&<#Transport.tp_connect[tp_connect]>.


[ Transport >> tp_connect ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`255 2 291 12`
(signature)`tp_connect(self, router, protocol)`

Connect the given mitre series, (invalid/unknown)&<#mitre>, to the configured transport stack.
Usually called after dispatching an instance created with (factor-local/classmethod)&<#Transport.from_stack[from_stack]>.


[ Transport >> tp_push ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`293 2 305 31`
(signature)`tp_push(self, state, io)`

Push the protocol channels on to the stack.


[ Transport >> tp_protocol_terminated ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`307 2 311 30`
(signature)`tp_protocol_terminated(self, state)`

Called by a protocol stack entry when both sides of the state have been closed.


[ Transport >> tp_remove ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`313 2 317 35`
(signature)`tp_remove(self, state)`


[ Transport >> tp_get ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`319 2 325 26`
(signature)`tp_get(self, label)`


[ Transport >> io_execute ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`327 2 328 41`
(signature)`io_execute(self)`


[ Transport >> io_transmit_close ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`330 2 334 44`
(signature)`io_transmit_close(self)`

Close the outgoing transfer context.


[ Interface ]
! CONTROL:
	/type/
		class
	/element/
		- (control)`property-set`
		- (source/area)`336 1 406 27`
! INHERIT:
	- (control)`property-set`
	- (source/area)`336 17 336 28`
	- (type/syntax)`core.Context`
	- (type/project-local/factor-element)&<core#Context[fault.kernel.core.Context]>
	
Application context managing logical interfaces.


[ Interface >> _if_initial ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`340 2 340 19`
#!source
	_if_initial = None

[ Interface >> __init__ ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`342 2 344 27`
(signature)`__init__(self, target, prepare)`


[ Interface >> actuate ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`346 2 349 23`
(signature)`actuate(self)`


[ Interface >> if_transition ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`351 2 353 59`
(signature)`if_transition(self, ports)`


[ Interface >> if_install ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`355 2 367 28`
(signature)`if_install(self, kports)`

Given file descriptors, install a new set of flows
accepting sockets from the given listening sockets.


[ Interface >> _if_dispatch ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`369 2 384 24`
(signature)`_if_dispatch(self, kports)`

Allocate and dispatch accept flows for the given (factor-local/parameter)&<#Interface._if_dispatch.Parameters.kports[kports]>.


[ Interface >> xact_exit ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`386 2 387 6`
(signature)`xact_exit(self, transport)`


[ Interface >> xact_void ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`389 2 394 10`
(signature)`xact_void(self, final)`


[ Interface >> if_sockets ]
! CONTROL:
	/type/
		property
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`395 2 396 36`

[ Interface >> terminate ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`398 2 406 27`
(signature)`terminate(self)`


[ Connections ]
! CONTROL:
	/type/
		class
	/element/
		- (control)`property-set`
		- (source/area)`408 1 449 27`
! INHERIT:
	- (control)`property-set`
	- (source/area)`408 19 408 30`
	- (type/syntax)`core.Context`
	- (type/project-local/factor-element)&<core#Context[fault.kernel.core.Context]>
	
Application context managing accepted transports.


[ Connections >> __init__ ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`413 2 415 20`
(signature)`__init__(self, dispatch)`


[ Connections >> cxn_accept ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`417 2 434 34`
(signature)`cxn_accept(self, packet)`

Moving to Sockets. Routing will be handled with flows.


[ Connections >> xact_exit ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`436 2 437 21`
(signature)`xact_exit(self, transport)`


[ Connections >> xact_void ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`439 2 442 28`
(signature)`xact_void(self, final)`


[ Connections >> terminate ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`444 2 449 27`
(signature)`terminate(self)`


[ dispatch ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`451 1 460 48`
(signature)`dispatch(xact, *flows)`

Dispatch a set of a flows within the Transaction as connected Transfers.

