! CONTROL:
	/type/
		module
	/element/
		- (control)`property-set`
		- (source/area)`1 1 52 22`
		- (coverage-zeros)`0`
		- (coverage-counters)`0`
Release version data structures.


[ total_ordering ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`4 1 4 36`

[ dataclass ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`5 1 7 10`

[ Semantic ]
! CONTROL:
	/type/
		class
	/element/
		- (control)`property-set`
		- (source/area)`8 1 39 10`
! INHERIT:
	- (control)`property-set`
	- (source/area)`8 16 8 21`
	- (type/syntax)`object`
	- (type/invalid/unknown)&<#object>
	
Primary fields for project using semantic versioning.

(factor-local/class)&<#Prerelease[Prerelease]> instances should be carried alongside if such information is desired by a codepath.
Separation is performed as any desired comparisions should only use the primary delta fields.

[ > Properties ]

/major/
	Major revision usually indicating which protocol set is implemented.
	Often, the API should have intersections with earlier major revisions,
	but the level of inconsistency is usually high enough to expect mismatches.

/minor/
	Minor revision indicating the level of the protocol set, increasing
	the number usually indicating an expansion of the protocols.

/patch/
	Revision indicator noting complete protocol set consistency across
	distinct values. Used for releases that correct defects.

	Patch should be negative if describing a pre-release and potentially
	a negative number indirectly identifying the (factor-local/data)&<#Prerelease.quality[Prerelease.quality]>.


[ Semantic >> major ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`31 2 31 20`
		- (type/syntax)`int`
		- (type/invalid/unknown)&<#int>
		
#!source
	major: (int) = None

[ Semantic >> minor ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`32 2 32 20`
		- (type/syntax)`int`
		- (type/invalid/unknown)&<#int>
		
#!source
	minor: (int) = None

[ Semantic >> patch ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`33 2 35 16`
		- (type/syntax)`int`
		- (type/invalid/unknown)&<#int>
		
#!source
	patch: (int) = None
		@total_ordering

[ Semantic >> __gt__ ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`36 2 39 10`
(signature)`__gt__(self, operand)`


[ Prerelease ]
! CONTROL:
	/type/
		class
	/element/
		- (control)`property-set`
		- (source/area)`40 1 53 21`
! INHERIT:
	- (control)`property-set`
	- (source/area)`40 18 40 23`
	- (type/syntax)`object`
	- (type/invalid/unknown)&<#object>
	
Pre-release version information.

[ > Properties ]

/quality/
	A string describing the quality of the release.
	For example, `'beta'`, `'alpha'`, `'rc'`.

/serial/
	An integer incremented to distinguish from previous pre-releases with the same quality.


[ Prerelease >> quality ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`52 2 52 22`
		- (type/syntax)`str`
		- (type/invalid/unknown)&<#str>
		
#!source
	quality: (str) = None

[ Prerelease >> serial ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`53 2 53 21`
		- (type/syntax)`int`
		- (type/invalid/unknown)&<#int>
		
#!source
	serial: (int) = None
