[["Project Graph processing tools.", "", "Provides &Queue for managing the processing of projects in dependency order.", "", "[ Usage ]", "", "#!syntax/python", "\tfrom fault.system import files", "\tfrom fault.projects import system as lsf", "\tfrom fault.projects import graph", "\tctx = lsf.Context()", "\t# Configure paths making up the project context.", "\tctx.connect(files.root@\"/product/path\")", "\tctx.load()", "\tq = Queue()", "\text = q.extend(ctx)", "", "\tdef process(projects):", "\t\t# Print dependency order for this example.", "\t\tfor x in projects:", "\t\t\tprint(x)", "\t\treturn projects # Signals completion in this example.", "", "\t# Unconditionally take initial set.", "\tjobs = list(q.take(4))", "\twhile not q.terminal() and jobs:", "\t\tfinished_set = process(jobs)", "\t\t# Notify queue state of completions.", "\t\tjobs = list(q.finish(*finished_set).take(4))", "", "[ Engineering ]", "", "The functions here could be easily refactored into a properly generalized form, but", "considering the code size and the benefits of a self-contained implementation,", "it seemed reasonable to leave the weight here. Even in the case of some duplicate", "effort, this should likely stay as-is."], ["Collect the projects and requirements from the &.system.Context instance."], ["Structure the projects and the required factors produced by &collect", "into a graph that may be processed with &sequence."], ["Sequence the nodes of a project graph according to the completion order recognized", "from the generator send calls."], ["State object for processing projects in dependency order."], ["Allocate instance; follow with &extend."], ["Extend the queue using the projects contained within &context.", "", "Returns any out-of-context requirements."], ["A tuple of integers telling how many projects have been reported as", "finished and the total number of projects."], ["Note the projects as being processed.", "", "Returns instance for chaining with &take."], ["Retrieve enqueued project IIDs in graph order."], ["Halt the queue causing &terminal to return &True and &take to return empty lists.", "The internal state will be discarded, but entries may still be finished."], ["Whether or not the queue has released all projects via &take.", "", "This can return &True prior to a final &finish call."]]