! CONTROL:
	/type/
		module
	/element/
		- (control)`property-set`
		- (source/area)`1 1 333 0`
		- (coverage-zeros)`0`
		- (coverage-counters)`0`
Factored Projects data structures and types.

[ FactorType ]

Annotation signature for factor data produced by project protocols.


[ Mapping ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`7 1 7 50`

[ Iterable ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`7 1 7 50`

[ Set ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`7 1 7 50`

[ dataclass ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`8 1 8 33`

[ tools ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`10 1 10 27`

[ Segment ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`11 1 11 33`

[ Path ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`12 1 12 31`

[ ignored ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`14 1 25 15`
#!source
	ignored = {
		'__pycache__',
		'__f-int__',
		'.f-int',
		'.git',
		'.svn',
		'.hg',
		'.darcs',
		'.pijul',
	}
	
	@tools.struct()

[ Variants ]
! CONTROL:
	/type/
		class
	/element/
		- (control)`property-set`
		- (source/area)`26 1 64 15`
! INHERIT:
	- (control)`property-set`
	- (source/area)`26 16 26 21`
	- (type/syntax)`object`
	- (type/invalid/unknown)&<#object>
	
Factor image variant specification.
A triple of contrived identifiers that represent a classification.

[ > Properties ]

/system/
	Identifier of the runtime environment; normally, an operating system name.
	Often, derived from (system/command)`uname`.

/architecture/
	Identifier for the instruction set or format.
	Often, derived from (system/command)`uname`.

/form/
	Identifier for the specialization of the image.
	Commonly used for providing an allocation for build intentions, and
	version specific images.


[ Variants >> form ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`46 2 46 26`
		- (type/syntax)`str`
		- (type/invalid/unknown)&<#str>
		
#!source
	form:(str) = 'executable'

[ Variants >> __repr__ ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`48 2 50 42`
(signature)`__repr__(self)`


[ Variants >> __str__ ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`52 2 53 64`
(signature)`__str__(self)`


[ Variants >> get ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`55 2 56 27`
		- (type/syntax)`str`
		- (type/invalid/unknown)&<#str>
		
(signature)`get(self, key)`


[ Variants >> reform ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`58 2 64 15`
(signature)`reform(self, rform)`

Reconstruct the instance with the given (factor-local/parameter)&<#Variants.reform.Parameters.rform[rform]> as the new (factor-local/data)&<#Variants.form[form]> value.


[ Format ]
! CONTROL:
	/type/
		class
	/element/
		- (control)`property-set`
		- (source/area)`65 1 84 68`
! INHERIT:
	- (control)`property-set`
	- (source/area)`65 14 65 19`
	- (type/syntax)`object`
	- (type/invalid/unknown)&<#object>
	
Source format structure holding the language and dialect.


[ Format >> dialect ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`70 2 72 13`
		- (type/syntax)`str`
		- (type/invalid/unknown)&<#str>
		
#!source
	dialect:(str) = None
		@classmethod

[ Format >> from_string ]
! CONTROL:
	/type/
		classmethod
	/element/
		- (control)`property-set`
		- (source/area)`73 2 84 68`
(signature)`from_string()`

Split the format identifier by the first (char)`.` in (invalid/unknown)&<#string>.
Creates an instance using the first field as the (invalid/unknown)&<#language> and second
as the (factor-local/data)&<#Format.dialect[dialect]>. If there is no (char)`.` or the dialect is an empty string,
the dialect will be (invalid/unknown)&<#None>,


[ FactorPath ]
! CONTROL:
	/type/
		class
	/element/
		- (control)`property-set`
		- (source/area)`86 1 113 37`
! INHERIT:
	- (control)`property-set`
	- (source/area)`86 18 86 24`
	- (type/syntax)`Segment`
	- (type/context-local/factor-element)&<fault.route/types#Segment[fault.route.types.Segment]>
	
A (context-local/factor-element)&<fault.route/types#Segment[fault.route.types.Segment]> identifying a factor.

The path is always relative; usually relative to either a product or project.
Identifiers in the path exclude any filename extensions.


[ FactorPath >> __str__ ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`94 2 95 32`
(signature)`__str__(self)`


[ FactorPath >> __repr__ ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`97 2 98 36`
(signature)`__repr__(self)`


[ FactorPath >> __matmul__ ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`100 2 113 37`
(signature)`__matmul__(self, fpath)`

Relative and absolute constructor.


[ factor ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`115 1 117 10`
#!source
	factor = FactorPath(None, ())
	
	@dataclass

[ FactorContextPaths ]
! CONTROL:
	/type/
		class
	/element/
		- (control)`property-set`
		- (source/area)`118 1 157 10`
! INHERIT:
	- (control)`property-set`
	- (source/area)`118 26 118 31`
	- (type/syntax)`object`
	- (type/invalid/unknown)&<#object>
	
File System Information regarding the context of a Factor.

This data structure is used to hold the set of directories related to an
Archived Factor.

[ > Properties ]

/root/
	The route containing either the (factor-local/data)&<#FactorContextPaths.project[project]> or the (factor-local/data)&<#FactorContextPaths.context[context]> enclosure.
	Also known as the Product Directory.

/context/
	The context project relevant to (factor-local/data)&<#FactorContextPaths.project[project]>.
	(invalid/unknown)&<#None> if the project is not managed within a Project Context.

/project/
	The route identifying the project.


[ FactorContextPaths >> root ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`136 2 136 20`
		- (type/syntax)`Path`
		- (type/context-local/factor-element)&<fault.system/files#Path[fault.system.files.Path]>
		
#!source
	root: (Path) = None

[ FactorContextPaths >> context ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`137 2 137 29`
		- (type/syntax)`FactorPath`
		- (type/factor-local/class)&<#FactorPath[FactorPath]>
		
#!source
	context: (FactorPath) = None

[ FactorContextPaths >> project ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`138 2 140 10`
		- (type/syntax)`Path`
		- (type/context-local/factor-element)&<fault.system/files#Path[fault.system.files.Path]>
		
#!source
	project: (Path) = None
		@property

[ FactorContextPaths >> enclosure ]
! CONTROL:
	/type/
		property
	/element/
		- (control)`property-set`
		- (source/area)`141 2 145 29`
		- (type/syntax)`bool`
		- (type/invalid/unknown)&<#bool>
		
Whether the original subject was referring to an enclosure.


[ FactorContextPaths >> select ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`147 2 149 30`
(signature)`select(self, factor)`


[ FactorContextPaths >> factor ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`151 2 157 10`
(signature)`factor(self)`

Construct a project factor path.


[ Information ]
! CONTROL:
	/type/
		class
	/element/
		- (control)`property-set`
		- (source/area)`158 1 181 10`
! INHERIT:
	- (control)`property-set`
	- (source/area)`158 19 158 24`
	- (type/syntax)`object`
	- (type/invalid/unknown)&<#object>
	
Project information structure usually extracted from (filename)`project.txt` files.

[ > Properties ]

/identifier/
	A hyperlink or literal attempting to provide a unique string that can be used
	to identify the project.

/name/
	The canonical local name for the project.
	Often, consistent with the directory or file containing the project's factors.

/authority/
	An arbitrary string intended to identify the entity that controls the project.

/contact/
	A string that identifies the appropriate means of contacting the authority
	regarding the project.


[ Information >> identifier ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`176 2 176 25`
		- (type/syntax)`str`
		- (type/invalid/unknown)&<#str>
		
#!source
	identifier: (str) = None

[ Information >> name ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`177 2 177 19`
		- (type/syntax)`str`
		- (type/invalid/unknown)&<#str>
		
#!source
	name: (str) = None

[ Information >> authority ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`178 2 178 24`
		- (type/syntax)`str`
		- (type/invalid/unknown)&<#str>
		
#!source
	authority: (str) = None

[ Information >> contact ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`179 2 181 10`
		- (type/syntax)`str`
		- (type/invalid/unknown)&<#str>
		
#!source
		contact: (str) = None
	
	@dataclass

[ Extensions ]
! CONTROL:
	/type/
		class
	/element/
		- (control)`property-set`
		- (source/area)`182 1 196 15`
! INHERIT:
	- (control)`property-set`
	- (source/area)`182 18 182 23`
	- (type/syntax)`object`
	- (type/invalid/unknown)&<#object>
	
Project information extensions.

[ > Properties ]

/icon/
	A hyperlink identifying an image that represents or symbolizes the project.

/synopsis/
	A brief, single sentence, description of the project.


[ Extensions >> icon ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`193 2 193 19`
		- (type/syntax)`str`
		- (type/invalid/unknown)&<#str>
		
#!source
	icon: (str) = None

[ Extensions >> synopsis ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`194 2 196 15`
		- (type/syntax)`str`
		- (type/invalid/unknown)&<#str>
		
#!source
		synopsis: (str) = None
	
	@tools.struct()

[ Reference ]
! CONTROL:
	/type/
		class
	/element/
		- (control)`property-set`
		- (source/area)`197 1 280 63`
! INHERIT:
	- (control)`property-set`
	- (source/area)`197 17 197 22`
	- (type/syntax)`object`
	- (type/invalid/unknown)&<#object>
	
A position independent reference to a required factor and the interpretation parameters
needed to properly form the relationship for integration.

(invalid/unknown)&<#project> and (factor-local/data)&<#factor[factor]> are the only required fields.

[ > Properties ]

/project/
	The identifier of the project that contains the required factor.

/factor/
	The project relative path to the required factor.
	If empty, the reference is identifying the entire project.

/method/
	The type of connection that is expected to be formed between the requirement
	and the target factor being integrated.

/isolation/
	The specifier of a format, variant, or factor type.

	For `type` methods, this is usually a reference to a language identifier.
	For `control`, it can be the specification of a feature's variant.

	When referring to normal requirements, this is always the factor type that should
	be used when integration is performed.

/format/
	In the case of `type` references, (factor-local/property)&<#Reference.format[format]> provides access to a structured
	form of (factor-local/data)&<#Reference.isolation[isolation]>: a (factor-local/class)&<#Format[Format]> instance.


[ Reference >> method ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`228 2 228 21`
		- (type/syntax)`str`
		- (type/invalid/unknown)&<#str>
		
#!source
	method: (str) = None

[ Reference >> isolation ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`229 2 229 24`
		- (type/syntax)`str`
		- (type/invalid/unknown)&<#str>
		
#!source
	isolation: (str) = None

[ Reference >> isolate ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`231 2 239 74`
(signature)`isolate(self, isolation)`

Reconstruct the reference replacing its isolation field the given (factor-local/parameter)&<#Reference.isolate.Parameters.isolation[isolation]>.

If (factor-local/parameter)&<#Reference.isolate.Parameters.isolation[isolation]> is already set, return (factor-local/parameter)&<#Reference.isolate.Parameters.self[self]>.


[ Reference >> __str__ ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`241 2 249 10`
(signature)`__str__(self)`


[ Reference >> format ]
! CONTROL:
	/type/
		property
	/element/
		- (control)`property-set`
		- (source/area)`250 2 260 13`
Construct the (factor-local/class)&<#Format[Format]> instance representing the (factor-local/data)&<#Reference.isolation[isolation]>.

Format instances are cached and repeat reads across references
with the same isolation should normally return the same object.


[ Reference >> from_ri ]
! CONTROL:
	/type/
		classmethod
	/element/
		- (control)`property-set`
		- (source/area)`261 2 280 63`
(signature)`from_ri(Class, method, ri)`

Create a reference from a resource indicator.
Splits on the fragment and the final path segment.


[ FactorType ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`282 1 288 1`
#!source
	FactorType = tuple[
		tuple[FactorPath, Reference], # Project relative path and type.
		tuple[
			Set[Reference], # Requirements
			Iterable[tuple[Reference, Path]], # Format References and Sources
		],
	]

[ FactorIsolationProtocol ]
! CONTROL:
	/type/
		class
	/element/
		- (control)`property-set`
		- (source/area)`290 1 301 83`
! INHERIT:
	- (control)`property-set`
	- (source/area)`290 31 290 36`
	- (type/syntax)`object`
	- (type/invalid/unknown)&<#object>
	
A project factor protocol.


[ FactorIsolationProtocol >> __init__ ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`294 2 295 30`
(signature)`__init__(self, parameters)`


[ FactorIsolationProtocol >> information ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`297 2 298 83`
		- (type/syntax)`Information`
		- (type/factor-local/class)&<#Information[Information]>
		
(signature)`information(self, route)`


[ FactorIsolationProtocol >> iterfactors ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`300 2 301 83`
		- (type/syntax)`Iterable[FactorType]`
		
(signature)`iterfactors(self, route)`


[ Protocol ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`302 1 302 34`
#!source
	Protocol = FactorIsolationProtocol

[ ProtocolViolation ]
! CONTROL:
	/type/
		class
	/element/
		- (control)`property-set`
		- (source/area)`304 1 309 22`
! INHERIT:
	- (control)`property-set`
	- (source/area)`304 25 304 33`
	- (type/syntax)`Exception`
	- (type/invalid/unknown)&<#Exception>
	
The route was identified as not conforming to the protocol.


[ fpc ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`310 1 333 26`
		- (type/syntax)`FactorPath`
		- (type/factor-local/class)&<#FactorPath[FactorPath]>
		
(signature)`fpc(context, factorpath, root)`

(factor-local/class)&<#FactorPath[FactorPath]> instance cache for relative and absolute paths constructed
from strings.

When (factor-local/parameter)&<#fpc.Parameters.factorpath[factorpath]> has leading periods, `.`, the number of periods will
select the ancestor of (factor-local/parameter)&<#fpc.Parameters.context[context]> to start the resulting (factor-local/class)&<#FactorPath[FactorPath]>
from.

[ > Parameters ]

/(parameter)`context`/
	- (type/syntax)`FactorPath`
	- (type/factor-local/class)&<#FactorPath[FactorPath]>
	
	The relative position (factor-local/parameter)&<#fpc.Parameters.factorpath[factorpath]> is to be interpreted from when
	leading periods are present.

/(parameter)`factorpath`/
	- (type/syntax)`str`
	- (type/invalid/unknown)&<#str>
	
	The string that is being interpreted to become a (factor-local/class)&<#FactorPath[FactorPath]> instance.

/(parameter)`root`/
	
	The absolute position that (factor-local/parameter)&<#fpc.Parameters.factorpath[factorpath]> will extend given that
	it is not relative.

