! CONTROL:
	/type/
		module
	/element/
		- (control)`property-set`
		- (source/area)`1 1 319 11`
Status frame I/O support.


[ sys ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`4 1 4 10`

[ os ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`5 1 5 9`

[ io ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`6 1 6 9`

[ itertools ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`7 1 7 16`

[ signal ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`8 1 8 13`

[ tools ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`10 1 10 27`

[ execution ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`11 1 11 30`

[ frames ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`12 1 12 27`

[ allocate_line_buffer ]
! CONTROL:
	/type/
		function
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`14 1 15 84`
(signature)`allocate_line_buffer(fd)`


[ spawnframes ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`17 1 63 86`
(signature)`spawnframes(invocation)`

Generator emitting frames produced by the given invocation's standard out.
If (invalid/unknown)&<#GeneratorExit> or (invalid/unknown)&<#KeyboardInterrupt> is thrown, the generator will send
the process a (none/invalid)&<http://fault.io/dev/null[signal.SIGKILL]>.


[ FrameArray ]
! CONTROL:
	/type/
		class
	/element/
		- (control)`property-set`
		- (source/area)`65 1 159 25`
! INHERIT:
	- (control)`property-set`
	- (source/area)`65 18 65 23`
	- (type/syntax)`object`
	- (type/invalid/unknown)&<#object>
	
IO array manager for frame sources.


[ FrameArray >> io ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`71 2 73 35`
(signature)`io(self)`


[ FrameArray >> __init__ ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`75 2 84 24`
(signature)`__init__(self)`


[ FrameArray >> __enter__ ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`86 2 88 27`
(signature)`__enter__(self)`


[ FrameArray >> __exit__ ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`90 2 91 18`
(signature)`__exit__(self, exc, val, tb)`


[ FrameArray >> connect ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`93 2 98 37`
(signature)`connect(self, id, fd)`


[ FrameArray >> force ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`100 2 101 19`
(signature)`force(self)`


[ FrameArray >> frame ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`103 2 110 7`
(signature)`frame(self, line)`

Decode and unpack the binary status frame using Array's configuration.


[ FrameArray >> collect ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`112 2 117 4`
(signature)`collect(self)`


[ FrameArray >> __iter__ ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`119 2 159 25`
(signature)`__iter__(self)`


[ Log ]
! CONTROL:
	/type/
		class
	/element/
		- (control)`property-set`
		- (source/area)`161 1 320 10`
! INHERIT:
	- (control)`property-set`
	- (source/area)`161 11 161 16`
	- (type/syntax)`object`
	- (type/invalid/unknown)&<#object>
	
Status frame serialization interface and write buffer.


[ Log >> highlights ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`167 2 175 14`
#!source
	highlights = {
		'reset': '\x1b[0m',
		'error': '\x1b[31m',
		'warning': '\x1b[33m',
		'notice': '\x1b[34m',
		'synopsis': '\x1b[38;5;247m',
	}
		@staticmethod

[ Log >> _xid ]
! CONTROL:
	/type/
		staticmethod
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`176 2 184 13`
(signature)`_xid(extension, xid)`


[ Log >> stdout ]
! CONTROL:
	/type/
		classmethod
	/element/
		- (control)`property-set`
		- (source/area)`185 2 192 13`
(signature)`stdout(Class)`

Construct a (factor-local/class)&<#Log[Log]> instance for serializing frames to (none/invalid)&<http://fault.io/dev/null[sys.stdout]>.


[ Log >> stderr ]
! CONTROL:
	/type/
		classmethod
	/element/
		- (control)`property-set`
		- (source/area)`193 2 198 92`
(signature)`stderr(Class)`

Construct a (factor-local/class)&<#Log[Log]> instance for serializing frames to (none/invalid)&<http://fault.io/dev/null[sys.stderr]>.


[ Log >> __init__ ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`200 2 208 17`
(signature)`__init__(self, pack, stream, encoding)`


[ Log >> transaction ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`210 2 222 14`
		- (type/syntax)`bool`
		- (type/invalid/unknown)&<#bool>
		
(signature)`transaction(self)`

Increment the operation count and check if it exceeds the frequency.
If in excess, flush the buffer causing serialized messages to be written
to the configured stream.

Return (invalid/unknown)&<#True> when a (factor-local/method)&<#Log.flush[flush]> is performed, otherwise (invalid/unknown)&<#False>.


[ Log >> flush ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`224 2 229 15`
(signature)`flush(self)`

Write any emitted messages to the configured stream and reset the operation count.


[ Log >> emit ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`231 2 235 82`
(signature)`emit(self, frame)`

Send a (invalid/unknown)&<#message> using the given (invalid/unknown)&<#channel> identifier.


[ Log >> inject ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`237 2 242 18`
(signature)`inject(self, data)`

Write bytes directly to the log's stream.


[ Log >> write ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`244 2 249 18`
(signature)`write(self, text)`

Write text to the log's stream incrementing the transmit count.


[ Log >> declare ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`251 2 259 33`
(signature)`declare(self)`

Emit a protocol declaration.


[ Log >> compose ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`261 2 284 54`
(signature)`compose(self, type, severity, qualifier, text, extension)`


[ Log >> notice ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`286 2 290 12`
(signature)`notice(self, *text)`


[ Log >> warning ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`292 2 296 12`
(signature)`warning(self, *text)`


[ Log >> error ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`298 2 302 12`
(signature)`error(self, *text)`


[ Log >> xact_open ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`304 2 308 10`
(signature)`xact_open(self, xid, synopsis, extension)`


[ Log >> xact_status ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`310 2 314 10`
(signature)`xact_status(self, xid, synopsis, extension)`


[ Log >> xact_close ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`316 2 320 10`
(signature)`xact_close(self, xid, synopsis, extension)`

