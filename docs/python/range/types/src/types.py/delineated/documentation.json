[["Range classes for managing associations and sets whose items span ranges.", "", "[ Engineering ]", "", "Mapping, and a Stack thereof, are not yet implemented. Currently, there", "are some differences between the implementation of a Mapping and the extant", "Set. Notably, adjacent ranges can only be joined if the values are equivalent.", "Sets join adjacent ranges unconditionally."], ["Calculate the set of inclusive ranges.", "", "Given a iterable of numbers, sort them and create ranges from", "the contiguous values.", "", "[ Parameters ]", "", "/numbers/", "\tIterable of Integers."], ["Combine the ranges into a sequence of ranges reducing them according", "to their overlaps and contiguity. Used by &Set to implement unions."], ["Fully Inclusive range used for cases where the range length always is one or more."], ["Returns `-1` if the stop is less than the start. `1` if equal or greater than."], ["The beginning of the Range, inclusive."], ["The end of the Range, inclusive."], ["Create a normal range using the given boundaries; the minimum given will be the", "start and the maximum will be the stop."], ["Create a range consisting of a single unit."], ["Whether or not the range contains the given number."], ["The relation of &r with respect to the &self.", "Returns `-1` if &r is less than the start; `1` if &r is", "greater than the stop, and `0` if it is contained.", "", "! WARNING:", "\tDoes not compensate for negative direction ranges."], ["The given range is contiguous with the other, but does *not* &overlaps."], ["The ranges overlap onto each other."], ["The ranges are continuous: overlaps or contiguous."], ["Combine the ranges regardless of adjacency."], ["Modify (filter) the &ranges to be outside of &self.", "If a range is wholly contained, filter it entirely.", "", "The filter is a generator and is applied to an iterable of", "ranges because it is the necessary framework for dropping", "wholly contained inclusive ranges. Inclusive ranges", "cannot represent zero length sizes, so it has to drop", "contained ranges entirely from the generated sequence.", "", "[ Parameters ]", "", "/ranges/", "\tSequence of &IRange instances to be filtered."], ["Identify the parts of the &ranges that intersect with &self.", "", "[ Parameters ]", "", "/ranges/", "\tSequence of &IRange instances to intersect with &self.", "", "[ Returns ]", "", "/&*Annotation/", "\tA iterable producing &IRange instances."], ["Return as an exclusive-end range pair."], ["Return an iterator to the units in the range."], ["A set of unique non-contiguous ranges.", "", "Implemented using a pair of sequences containing the start and the stop", "of each range. For sets consisting of single unit ranges, regular &set", "objects are more efficient. &bisect is used as the search algorithm", "when checking for containment, so applications requiring high performance", "may need to convert the range set or portions thereof into a regular &set."], ["Low-level constructor building a Set from an", "*ordered sequence* of *non-overlapping* range instances."], ["Total number of *individual units* held by the set.", "", "Working with inclusive ranges, this means that spans from `0` to `100` will", "have a length of `101`."], ["Get the ranges in the set that have intersections with the given range."], ["Add a range to the set combining it with any continuations."], ["Remove an arbitrary range from the set."], ["Calculate the intersection between two &Set instances.", "Low-level method. Use (python/operator)`|` for high-level purposes."], ["Calculate the difference between two &Set instances.", "Low-level method. Use (python/operator)`-` for high-level purposes."], ["Calculate the union between two &Set instances."], ["Exclusive numeric range. Only exclusive on the stop.", "Provides access to zero-sized ranges that need to maintain position."], ["Returns -1 if the stop is less than the start."], ["The beginning of the Range, inclusive."], ["The end of the Range, inclusive."], ["Create a normal range using the given boundaries; the minimum given will be the", "start and the maximum will be the stop."], ["Create a range consisting of a single unit."], ["Whether or not the range contains the given number."], ["The relation of &r with respect to the &self.", "Returns `-1` if &r is less than the start; `1` if &r is", "greater than the stop, and `0` if it is contained.", "", "! WARNING:", "\tDoes not compensate for negative direction ranges."], ["Whether the given &range is contiguous with &self."], ["Combine the ranges."], ["Returns &self."], ["Return an iterator to the units in the range."], ["A tiered, finite map of ranges explicitly associated with values.", "", "! WARNING:", "\tImplementation is sensitive to the order in which items are set.", "\tKeys intending to contain other Ranges must be set before the", "\tnarrow range is set.", "", "[ Engineering ]", "Rewrite by vectorizing k-index and v-index to eliminate the recursive implementation.", "In cases of instances with large depths, a vectorized form should help with", "execution (fewer stack frames) and memory (fewer instances) performance."], ["For the given key, identify the containing range and its associated value", "at each level in the mapping."]]