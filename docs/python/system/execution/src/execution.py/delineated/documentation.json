[["System process execution interfaces and", "process global registry for controlling the composition of &Specification for system process execution.", "", "[ Purpose ]", "", "Primarily, this process global registry is intended for test cases that need to allow the harness to", "override the execution methods for selecting the correct executable. However, general purpose usage", "is reasonable for formalizing system process execution.", "", "[ Interface ]", "", "The &select callable returns the handler for a given execution method &Identifier. This allows the", "command constructor to be cached for repeat use. The &prepare callable selects and invokes", "the method returning the invocation specification.", "", "[ Default Methods ]", "", "/(id)`python-script`/", "\tExecute a Python script selected using a file system path.", "/(id)`python-module`/", "\tExecute a Python module available in the &sys.path of the Python subprocess.", "/(id)`system-file`/", "\tExecute an executable file selected using a file system path.", "/(id)`factor`/", "\tExecute a factor available on the factor path. Once the factor's type is identified,", "\teither (string)`system-file` or (string)`python-module` will be used.", "", "[ Types ]", "", "Symbolic names for annotations used by &.execution.", "", "/&Specification/", "\tA pair containing a selector for the executable and the argument vector to be used", "\tupon invocation. &typing.AnyStr is used to denote the possibility of mixed encoded", "\tand decoded strings. Usage may require resolutions depending on the target execution interface.", "/&Vector/", "\tAn argument vector used to designate the parameters to a process.", "\tA sequence of any string types; this is used from the perspective of a", "\tcalling process whose arguments may require encoding or conversion.", "/&Method/", "\tSignature of a &Specification constructor.", "/&Identifier/", "\tThe hashable used to access a &Method."], ["Execution Method index associating a set of &Identifier's with their", "corresponding &Method's."], ["Duplicate the &Index instance &self and update it with the given &methods."], ["Register &new as the handler for &method and return the previously installed &Method.", "Returns the old &Method installed for &method identifier."], ["Return the &Specification constructor identified by &method."], ["Construct a pair suitable for creating a &KInvocation instance."], ["Descriptor of change in a subprocess' state."], ["The process or SIGCHLD signals. This is an abstraction to &os.waitpid", "and can only be used with child processes.", "", "[ Parameters ]", "/status/", "\tThe status code produced by &os.waitpid. (stat_loc)", "", "[ Exceptions ]", "/&ValueError/", "\tRaised when the given status code could not be recognized."], ["Transform pending process events such as exits into a &Delta describing", "the event. Normally used to respond to process exit events in order to reap", "the process or SIGCHLD signals. This is an abstraction to &os.waitpid", "and can only be used with child processes.", "", "[ Parameters ]", "/pid/", "\tThe process identifier to reap.", "/options/", "\tKeyword parameter defaulting to `os.WNOHANG | os.WUNTRACED`.", "\tThis can be altered in cases where the flags are not desired.", "", "[ Returns ]", "/&Delta/", "\tCore is &True or &False for exits, and &None in all other cases.", "/&None/", "\tNo status was available due to error."], ["Execute the given invocation collecting (system/file)`/dev/stdout` into a &bytes instance.", "&dereference blocks until EOF is read from the created pipe and should only be used to", "execute reliable processes.", "", "If (system/signal)`SIGALRM` is not appropriate for timeouts, invocation should be managed", "directly.", "", "! RELATED: &execute"], ["Execute the given invocation collecting (system/file)`/dev/stderr` into a &bytes instance.", "&effect blocks until EOF is read from the created pipe and should only be used to", "execute reliable processes.", "", "! RELATED: &dereference"], ["Execute an &invocation waiting for the subprocess to exit before allowing", "the thread to continue. The invocation will inherit the process' standard", "input, output, and error.", "", "Returns the status of the subprocess; negative if the process exited due to a signal.", "", "! RELATED: &effect"], ["Structure holding the file descriptors associated with a *running* pipeline", "of operating system processes. Returned by called &PInvocation instances to", "provide access to the input and output pipes and the standard errors of each process."], ["Pipe file descriptor for the pipeline's input."], ["Pipe file descriptor for the pipeline's output."], ["The sequence of process identifiers of the commands that make up the pipeline."], ["Mapping of process identifiers to the standard error file descriptor."], ["Close all file descriptors and terminate all processes (SIGKILL) involved in the pipeline.", "Processes are *not* reaped."], ["A sequence of &KInvocation instances used to form a pipeline for", "system processes; a process image where the file descriptors 0, 1, and 2", "refer to standard input, standard output, and standard error.", "", "Pipelines of zero commands can be created; it will merely represent a pipe", "with no standard errors and no process identifiers."], ["Create a &PInvocation instance from a sequences of commands.", "", "#!/pl/python", "\tpr = libexec.PInvocation.from_commands(", "\t\t['/bin/cat', '/bin/cat', 'somefile'],", "\t\t['/usr/bin/tee', 'tee', 'duplicate-1', 'duplicate-2'],", "\t)", "", "The command tuples must specify the absolute path to the executable", "as the first item, the second item is the program's runtime name", "that is accessible as the first argument. Often, the basename of the", "command if it were invoked using (system:environment)`PATH` resolution."], ["Create a Pipeline Invocation from a sequence of process-path and process-arguments", "pairs.", "", "#!/pl/python", "\tpr = libexec.PInvocation.from_pairs([(\"/bin/cat\", (\"cat\", \"file\", \"-\")), ...])"], ["Execute the series of invocations returning a &Pipeline instance containing", "the file descriptors used for input, output and the standard error of all the commands.", "", "[ Parameters ]", "/signal/", "\tThe signal used to kill the process in case of an exception during spawn.", "\tDefaults to (system/signal)`SIGKILL`."], ["Parse a System Execution Plan string into structured environment", "settings, executable path, and command arguments."], ["Serialize the environment, execution path, and command arguments into a string."], ["Factor Execution Platform structure for defining architecture specific runtimes."], ["Produce the architectures and their synonyms from a string", "that uses newline separated records and space separated fields."], ["Read the plans identified by &names from the given directory, &source."], ["Interpret a stored platform emitting section records."], ["Create an instance from a platform directory."], ["Compose a &Platform from a sequence of paths given", "that they are extensions of &system."], ["Select the canonical identifier for the given architecture."], ["Define additional architectures extending the current set."], ["Iterate the platform's defined architectures with their synonyms and execution plans."], ["Prepare the necessary information for dispatching an executable with the", "identified architecture on the host system."]]