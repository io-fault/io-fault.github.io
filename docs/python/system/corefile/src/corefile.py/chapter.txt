! CONTROL:
	/type/
		module
	/element/
		- (control)`property-set`
		- (source/area)`1 1 112 0`
		- (coverage-zeros)`29`
		- (coverage-counters)`41`
Manage system core dumps.

Provides access to core-file location after process exits and controlling
the limits of core file sizes produced by the system. For systems
that do not have (invalid/unknown)&<#resource> modules, the functionality is essentially
a no-op and performs empty functions in order to allow existing code to work.

[ Properties ]

/available/
	Whether or not core-file controls is available.


[ sys ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`14 1 14 10`

[ os ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`15 1 15 9`

[ os ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`16 1 16 14`

[ contextlib ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`17 1 17 17`

[ functools ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`18 1 18 16`

[ location ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`54 1 62 26`
		- (coverage-zeros)`3`
		- (coverage-counters)`4`
(signature)`location(pid)`

Given a process identifier, return the location of the corefile
based on the (factor-local/parameter)&<#location.Parameters.pattern[pattern]>.


[ constraint ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`63 1 109 27`
		- (coverage-zeros)`9`
		- (coverage-counters)`9`
(signature)`constraint(image_size_limit)`

Constrain core dumps during the execution of the context. Useful for managing tests that
may dump core. Alternatively, (factor-local/data)&<#enabled[enabled]> and (factor-local/data)&<#disabled[disabled]> can be used as shorthands for clarity.

! WARNING:
	(factor-local/function)&<#constraint[constraint]> is *not* thread safe.
	Concurrent execution will render inconsistent effects on the limit.

When executed on systems where (invalid/unknown)&<#available> is (invalid/unknown)&<#False>, (factor-local/function)&<#constraint[constraint]> does nothing.

Typical use:

#!syntax/python
	with corefile.constraint(None):
		...
	
Core dumps can disabled by designating zero size:

#!syntax/python
	with corefile.constraint(0):
		...
	
[ > Parameters ]

/(parameter)`image_size_limit`/
	- (type/syntax)`int`
	- (type/invalid/unknown)&<#int>
	
	The limit of the core file's size emitted by the system.
	A size of `0` will disable core files from being generated.

/(parameter)`getrlimit`/
	
	(control/absent)`Undocumented`.

/(parameter)`setrlimit`/
	
	(control/absent)`Undocumented`.

/(parameter)`rtype`/
	
	(control/absent)`Undocumented`.


[ enabled ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`111 1 111 43`
#!source
	enabled = functools.partial(constraint, -1)

[ disabled ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`112 1 112 43`
#!source
	disabled = functools.partial(constraint, 0)
