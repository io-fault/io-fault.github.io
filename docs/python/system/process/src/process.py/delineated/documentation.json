[["Process invocation and management interfaces.", "", "[ Elements ]", "", "/signal_codes/", "\tMapping of categorized signal names to signal (integer) codes.", "/signal_names/", "\tMapping of signal (integer) codes to categorized names.", "/signal_identifiers/", "\tMapping of signal codes to identifiers used in POSIX header files.", "/fatal_signals/", "\tSet of signals that would cause an immediate exit if `SIG_DFL` were set."], ["Trip the main thread by sending the process a SIGUSR2 signal in order to cause any", "running system call to exit early. Used in conjunction with", "&runtime.interject"], ["In cases where there may be process dependent callbacks, add this to the", "&fork_child_callset to clear the callbacks."], ["Extension of SystemExit for use with interjections."], ["A structure representing the invocation of a system process and the specification", "of the means of exiting. Normally, used to describe how the process was invoked and the", "corresponding parameters, argv and environ, in which the invocation should be reacting to.", "", "For system invocation, the &parameters dictionary will have two entries by default:", "`'system'` and `'type'`.", "", "[ Elements ]", "/context/", "\tThe Invocation that caused the creation of this &Invocation.", "\tBy default and when created from &system, this property is &None.", "/parameters/", "\tArbitrary storage for the parameteres of the invocation. Usually, `'type'`, `'system'`,", "\tand `'structured'` keys are present."], ["Perform the exit method designated during the initialization of the invocation."], ["The working directory of the process when the &Invocation was created."], ["Arguments provided by the system without the leading command name."], ["The environment variables collected from the system during the creation of the instance."], ["Copy the given &envvars from &os.environ into the invocation's &parameters.", "The snapshot of imported environment variables may be accessed using &environ.", "", "[ Parameters ]", "/envvars/", "\tThe collection of variables to copy from the environment."], ["Create an instance representing that of the invocation from the operating", "system. Primarily, information is retrieved from the &sys and &os module.", "", "[ Parameters ]", "/context/", "\tA reference context identifying the &Invocation caused this invocation to be created.", "/environ/", "\tSequence declaring the environment variables to acquire a snapshot of."], ["A means of exit used with a &Fork.trap managed process.", "", "Injecting the exception on the main thread, this can also", "be used within regular Python processes."], ["Process control exceptions for significant events.", "", "This is a control exception inheriting from &BaseException.", "It should not be directly trapped, but subclasses may use it to classify", "exceptions that are not necessarily indicative of a failure."], ["An exception used to communicate that a fatal condition was identified."], ["Raise a &Critical exception in the main thread forcing the process to exit."], ["Similar to &KeyboardInterrupt, but causes &control to exit with the signal,", "and calls critical status hooks.", "", "Primarily used to cause signal exit codes that are usually masked with", "&KeyboardInterrupt."], ["Register a system-level atexit handler that will cause the process to exit with", "the configured signal."], ["Signal handler that interjects an Interruption instance into the main thread.", "", "Default signal handler for SIGINT."], ["Python-level signal handler that does nothing."], ["Assign the void signal handler to the all of the given signal numbers."], ["Assign the interrupt signal handler to the all of the given signal numbers."], ["Signal handler for a root process."], ["Exception used to signal &Fork.trap to replace the existing managed call.", "", "Usual case is that a &Fork.trap call is made on the main thread where other threads are", "created to run the actual program. Given that the program is finished and another should be ran", "*as if the current program were never ran*, the &ControlException can be raised in the", "main thread replacing the initial callable given to &Fork.trap.", "", "The exception should only be used through the provided classmethods.", "", "This exception should never be displayed in a traceback as it is intended to be caught", "by &Fork.trap."], ["Substitute the existing control call with the given one.", "", "Immediately raises a &Fork instance in the calling thread to be caught", "by a corresponding &trap call.", "", "Only to be used in cases where it is known that the current frame stack is", "being managed by &trap."], ["Execute the given callable with the given arguments in a child process.", "This performs an &interject call. Given that &pivot was called to execute the", "program, the pivot function will catch the exception, in the child, and", "execute the replacement.", "", "[Parameters]", "", "/controller/", "\tThe object that will be called in the clone.", "/args/", "\tArguments given to the callable.", "/kw/", "\tKeywords given to the callable.", "", "[Returns]", "/&int/", "\tThe child process' PID.", "", "[Exceptions]", "/&Critical/", "\tRaised when the returns in the branches did not return."], ["Establish a point for substituting the process. Trap provides an", "exception trap for replacing the controlling stack. This is used to", "perform safe fork operations that allow tear-down of process specific resources", "in a well defined manner.", "", "! NOTE:", "\tDue to the varying global process state that may exist in a given process, it", "\tis often better to start a new Python instance."], ["A callable used to trap exceptions and interject a &Critical instance caused by the", "original. This function is intended for critical sections where the failure is likely", "to cause the application to become unresponsive via usual routes.", "", "&critical may return, but must never raise.", "", "For example:", "", "#!syntax/python", "\tfrom fault.system.process import critical", "", "\tdef fun():", "\t\twhile True:", "\t\t\t# critical loop", "\t\t\t# any exception causes the process to terminate", "\t\t\t...", "", "\tcritical(None, fun)"], ["Perpetually protect the main thread using a sleep loop that can only exit", "using an interjection.", "", "Used by &control to hold the main thread in &Fork.trap for applications", "that rely on a set of threads to perform the actual work.", "", "[ Exceptions ]", "/&Critical/", "\tRaised in cases where the infinite loop exits.", "", "/&Exit/", "\tRaised by an application thread using &interject."], ["A program that calls this is making an explicit declaration that signals should be", "defaulted and the main thread should be protected from uninterruptable calls to allow", "prompt process exits while still performing critical state restoration.", "", "The given &main is executed with the given positionals &args and keywords &kw inside", "of a &Fork.trap call. &Fork handles formal exits and main-call substitution."], ["(system/signal)`SIGALRM` based context manager for maximum time interruptions."], ["Dispatch the given controller in a child process of a &control controlled process.", "The returned object is a reference to the result that will block until the child", "process has written the serialized response to a pipe.", "", "Used to create *very simple* fork trees or workers that need to send completion reports back to", "the parent. This expects the calling process to have been launched with &control.", "", "[ Parameters ]", "", "/controller/", "\tThe object to call to use the child's controller."], ["Construct a &files.Path instance referring to (system/environ)`PWD` or", "the current working directory if the environment variable is not defined", "or it is an empty string.", "", "The returned path is not maintained within any cache so repeat calls", "will create a new instance."], ["Update (system/environ)`PWD` and the current working directory.", "", "The current working directory is set prior to the environment being updated.", "Exceptions should not require (system/environ)`PWD` to be reset by the caller.", "", "[ Returns ]", "The given &directory for chaining if it is a &files.Path instance.", "Otherwise, the result of &fs_pwd is returned."], ["Initialize or return &.process.scheduler.", "", "Accessing &.process.scheduler will perform this automatically."]]