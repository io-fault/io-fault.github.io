! CONTROL:
	/type/
		module
	/element/
		- (control)`property-set`
		- (source/area)`1 1 59 11`
		- (coverage-zeros)`7`
		- (coverage-counters)`30`
Supplemental string operations.


[ itertools ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`4 1 4 16`

[ operator ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`5 1 5 15`

[ ilevel ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`7 1 11 56`
		- (coverage-zeros)`0`
		- (coverage-counters)`3`
		- (type/syntax)`int`
		- (type/invalid/unknown)&<#int>
		
(signature)`ilevel(string)`

Return the indentation level of the given string.


[ indent ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`13 1 21 55`
		- (coverage-zeros)`7`
		- (coverage-counters)`8`
		- (type/syntax)`str`
		- (type/invalid/unknown)&<#str>
		
(signature)`indent(string)`

Indent the given (factor-local/parameter)&<#indent.Parameters.string[string]> using the (factor-local/parameter)&<#indent.Parameters.level[level]> * (factor-local/parameter)&<#indent.Parameters.indentwith[indentwith]>.


[ normal ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`23 1 28 70`
		- (coverage-zeros)`0`
		- (coverage-counters)`3`
		- (type/syntax)`str`
		- (type/invalid/unknown)&<#str>
		
(signature)`normal(string)`

Normalize the whitespace in the given string.


[ slug ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`30 1 34 57`
		- (coverage-zeros)`0`
		- (coverage-counters)`3`
		- (type/syntax)`str`
		- (type/invalid/unknown)&<#str>
		
(signature)`slug(string)`

Convert (factor-local/parameter)&<#slug.Parameters.separators[separators]> and spaces into single (factor-local/parameter)&<#slug.Parameters.replacement[replacement]> instances inside (factor-local/parameter)&<#slug.Parameters.string[string]>.


[ varsplit ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`36 1 60 10`
		- (coverage-zeros)`0`
		- (coverage-counters)`9`
(signature)`varsplit(indicator, string)`

str.split() translating series of tokens into numbers instead
of mere separations. The returned list has the pattern: `[str, int, str, int, ...]`.

