[["Function and iterator tools used by local projects."], ["Callable that returns &None regardless of the arguments and keywords given."], ["Callable that returns the single argument that it was given."], ["Return a callable that returns the given object regardless of", "the given parameters."], ["Iterate through the contents of the &iterable,", "but only allow an item to be emitted once.", "", "! WARNING:", "\tThe implementation uses a &set to track which items have transpired.", "\tIt is never reset internally, so the generator can allocate", "\tarbitrary quantities of memory.", "", "[ Parameters ]", "", "/iterable/", "\tThe iterable whose duplicate items should be eliminated.", "/existing/", "\tThe initial items in the filter set. Arguments given as", "\t&existing will never be emitted. For instance, filtering", "\t&None may be common."], ["An iterator constructor that takes a sequence of", "iterables and interlaces their items one after another.", "While uncommon, the pattern produced by interlace is complicated", "enough that forcing its recreation is undesirable.", "", "Interlace produces an iterator following the pattern:", "", "#!text", "\tinterlace(i1, i2, ..., in) -> (", "\t\ti1-0, i2-0, ..., in-0,", "\t\ti1-1, i2-1, ..., in-1,", "\t\t\u22ee", "\t\ti1-n, i2-n, ..., in-n,", "\t)"], ["Return a composition of the given callable arguments.", "", "Executing a composition is equivalent to: `g(f(x))` where", "g and f are the parameters to compose: `compose(g,f)(x)`.", "", "Compose has some trivial intelligence in that compositions", "of single functions return the function and compositions", "of no functions returns &reflect.", "", "The resulting composition exposes the callables on the", "function's \"callables\" attribute."], ["Create a function that pluralizes the return of the given callable, &f."], ["Given a callable taking a single parameter, create another", "that maps the callable against a sequence.", "", "Equivalence:", "#!syntax/python", "\tunroll(f)(iterable) == [f(x) for x in iterable]"], ["Structure the given &iterable by the given &condition.", "Returns a generator producing (grouping, sequence) pairs.", "", "A &True result from &condition essentially terminates the subsequence,", "and creates a new sequence to be populated while &condition is &False.", "", "[ Parameters ]", "", "/condition/", "\tThe grouping item in the tuple is the item that triggers", "\ta &True result from &condition.", "", "/iterable/", "\tThe sequence item in the tuple is a sequence of items", "\twhere the result of the &condition was &False.", "", "/initial/", "\tDesignate the initial grouping to be emitted.", "\tDefaults to &None."], ["Attribute override for immutable property methods.", "", "Presumes the wrapped method name is consistent with the property name."], ["Return the level of consistency among the elements produced by the given &iterables.", "The counting stops when an element is not equal to the others at the same index.", "", "More commonly, the common prefix depth or length of all the given iterables.", "Elements must be hashable; equality is indirectly performed by forming a set."]]