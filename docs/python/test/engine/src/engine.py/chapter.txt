! CONTROL:
	/type/
		module
	/element/
		- (control)`property-set`
		- (source/area)`1 1 143 19`
		- (coverage-zeros)`0`
		- (coverage-counters)`0`
Harness implementation and support functions.


[ itertools ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`4 1 4 16`

[ types ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`5 1 5 19`

[ get_test_index ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`7 1 32 13`
(signature)`get_test_index(tester)`

Returns the first line number of the underlying code object.


[ test_order ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`34 1 39 45`
(signature)`test_order(module, name)`

Key function used by (factor-local/function)&<#gather[gather]> that uses (factor-local/function)&<#get_test_index[get_test_index]> in
order to elevate a test's position given that it was explicitly listed.


[ gather ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`41 1 49 13`
(signature)`gather(container)`

Returns an ordered list of attribute names that match the (factor-local/parameter)&<#gather.Parameters.prefix[prefix]>.


[ select ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`51 1 79 9`
(signature)`select()`

Slice the tests by comparing their identity to (invalid/unknown)&<#start> and (invalid/unknown)&<#stop>.


[ Harness ]
! CONTROL:
	/type/
		class
	/element/
		- (control)`property-set`
		- (source/area)`81 1 130 28`
! INHERIT:
	- (control)`property-set`
	- (source/area)`81 15 81 20`
	- (type/syntax)`object`
	- (type/invalid/unknown)&<#object>
	
Execute a sequence of tests.


[ Harness >> Test ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`86 2 86 18`
#!source
	Test = types.Test

[ Harness >> collect ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`87 2 89 13`
#!source
	collect = staticmethod(gather)
		@classmethod

[ Harness >> from_module ]
! CONTROL:
	/type/
		classmethod
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`90 2 98 10`
(signature)`from_module(Class, module)`


[ Harness >> count ]
! CONTROL:
	/type/
		property
	/element/
		- (control)`property-set`
		- (source/area)`99 2 103 24`
		- (type/syntax)`int`
		- (type/invalid/unknown)&<#int>
		
Number of tests that have been prepared for execution.


[ Harness >> __init__ ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`105 2 111 20`
(signature)`__init__(self, identity, container, tests)`

Initialize the members of the Harness.


[ Harness >> dispatch ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`113 2 118 14`
(signature)`dispatch(self, test)`

Dispatch the given (factor-local/data)&<#Harness.Test[Test]> to resolve its fate.


[ Harness >> reveal ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`120 2 130 28`
(signature)`reveal(self)`

Reveal the fate of the given tests.


[ execute ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`132 1 144 18`
(signature)`execute(module)`

Resolve the fate of the tests contained in (factor-local/parameter)&<#execute.Parameters.module[module]>. No status information
is printed and the exception of the first failure will be raised.

