[["Test framework primitives. Provides and defines &Test, &Contention, &Absurdity, and &Fate."], ["Exception raised by &Contention instances designating a failed assertion."], ["Contentions are objects used by &Test objects to provide assertions.", "Usually, contention instances are made by the true division operator of", "&Test instances passed into unit test subjects.", "", "#!syntax/python", "\timport featurelib", "", "\tdef test_feature(test):", "\t\texpectation = ...", "\t\ttest/featurelib.functionality() == expectation", "", "True division, \"/\", is used as it has high operator precedance that allows assertion", "expresssions to be constructed using minimal syntax that lends to readable failure", "conditions.", "", "All of the comparison operations are supported by Contention and are passed on to the", "underlying objects being examined."], ["Contend that the &subject raises the given exception when it is called::", "", "#!syntax/python", "\ttest/Exception ^ (lambda: subject())", "", "Reads: \"Test that 'Exception' is raised by 'subject'\"."], ["Contend that the parameter is contained by the object, &Container::", "", "#!syntax/python", "\ttest/Container << subject", "", "Reads: \"Test that 'Container' contains 'subject'\"."], ["The Fate of a test. &Test.seal uses &Fate exceptions to describe the result of a unit test."], ["Whether the fate's effect should be considered undesirable."], ["An object that manages an individual test and its execution.", "Provides interfaces for constructing and checking &Contention's using", "a simple syntax.", "", "[ Properties ]", "", "/identifier/", "\tThe key used to retrieve the test function from the container.", "", "/subject/", "\tThe callable that performs a series of checks--using the &Test instance--that", "\tdetermines the &fate.", "", "/fate/", "\tThe conclusion of the Test; pass, fail, error, skip. An instance of &Fate.", "", "/exits/", "\tA &contextlib.ExitStack for cleaning up allocations made during the test.", "\tThe harness running the test decides when the stack's exit is processed.", "", "/metrics/", "\tA set of measurements included in the test's report.", "\tPrimarily, `'duration'`, `'usage'`, `'contentions'`, `'timer'`, `'iterations'`."], ["Measure the relative performance of a loop's iterations.", "", "[ Parameters ]", "/units/", "\tThe factor to increase the iteration count by.", "\tUsed when the for-loop contains repeated statements for", "\timproved precision.", "/count/", "\tThe maximum number of iterations to perform.", "/time/", "\tThe maximum duration of the timer in seconds.", "/scale/", "\tThe factor to increase the cycle loop count by.", "/cycle/", "\tThe maximum number of iterations to perform within a cycle.", "\tUsed to limit the effects of the &scale factor."], ["Measure the relative performance of the given callable."], ["Seal the fate of the Test by executing the subject-callable with the Test", "instance as the only parameter.", "", "Any exception that occurs is trapped and assigned to the &fate attribute", "on the Test instance. &None is always returned by &seal."], ["Used by test subjects to skip the test given that the provided &condition is", "&True."], ["Set a trap for exceptions converting a would-be &Error fate on exit to a &Failure.", "", "#!syntax/python", "\twith test.trap():", "\t\t...", "", "This allows &fail implementations set a trace prior to exiting", "the test's &subject.", "", "&Fate exceptions are not trapped."]]