! CONTROL:
	/type/
		module
	/element/
		- (control)`property-set`
		- (source/area)`1 1 292 0`
		- (coverage-zeros)`0`
		- (coverage-counters)`0`
Service configuration interfaces.

Manages the service state stored on disk.

[ Properties ]

/environment/
	The environment variable that will be referenced in order
	to identify the default service directory override.

/default_route/
	A (remote/factor-element)&<http://fault.io/python/system/files#Path[fault.system.files.Path]> instance pointing to the default route
	relative to the user's home directory. (~/.fault)


[ os ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`16 1 16 9`

[ sys ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`17 1 17 10`

[ itertools ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`18 1 18 16`

[ Path ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`20 1 20 35`

[ query ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`21 1 21 30`

[ libexec ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`22 1 22 45`

[ environment ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`24 1 24 23`
#!source
	environment = 'DAEMONS'

[ default_route ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`25 1 25 39`
#!source
	default_route = query.home() / '.rootd'

[ default_daemons ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`26 1 26 44`
#!source
	default_daemons = default_route * '.daemons'

[ identify_route ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`28 1 41 31`
(signature)`identify_route()`

Return the service directory route.


[ service_routes ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`43 1 52 13`
(signature)`service_routes(route)`

Collect the routes to the set of services in the directory.
Regular files existing in (factor-local/parameter)&<#service_routes.Parameters.route[route]> are ignored.


[ _actuation_map ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`54 1 54 85`
#!source
	_actuation_map = {'enabled':True, 'disabled':False, True:'enabled', False:'disabled'}

[ Configuration ]
! CONTROL:
	/type/
		class
	/element/
		- (control)`property-set`
		- (source/area)`56 1 292 53`
! INHERIT:
	- (control)`property-set`
	- (source/area)`56 21 56 26`
	- (type/syntax)`object`
	- (type/invalid/unknown)&<#object>
	
Service configuration storage interface.


[ Configuration >> initialized ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`61 2 65 44`
(signature)`initialized(self)`

Whether the service's configuration directory exists.


[ Configuration >> prepare ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`67 2 77 19`
(signature)`prepare(self)`

Create the service directory.


[ Configuration >> void ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`79 2 84 22`
(signature)`void(self)`

Destroy the service directory.


[ Configuration >> snapshot ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`86 2 94 3`
(signature)`snapshot(self)`


[ Configuration >> fields ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`96 2 96 78`
#!source
	fields = ('executable', 'parameters', 'environment', 'abstract', 'actuation')

[ Configuration >> update ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`98 2 105 27`
(signature)`update(self, fm)`

Overwrite configuration fields present in the given mapping, (factor-local/parameter)&<#Configuration.update.Parameters.fm[fm]>.
No merge logic is applied; the value in the mapping will replace the attribute value.


[ Configuration >> __init__ ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`107 2 123 29`
(signature)`__init__(self, route, identifier)`

Initialize the Service structure selecting the (factor-local/parameter)&<#Configuration.__init__.Parameters.route[route]> as its
storage location. The (factor-local/parameter)&<#Configuration.__init__.Parameters.route[route]> may not exist upon instantiation
as it may be the first use in which the user may choose to
initialize a directory or merely check for whether it is
a service at all.


[ Configuration >> trim ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`125 2 133 6`
(signature)`trim(self)`

Trim the critical log in the service's directory.

! PENDING:
	Not implemented.


[ Configuration >> execution ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`135 2 140 49`
(signature)`execution(self)`

Return a tuple consisting of the executable and the parameters.


[ Configuration >> execute ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`142 2 166 14`
(signature)`execute(self)`

Execute the service replacing the process image. (factor-local/method)&<#Configuration.execute[execute]> does not return.

Environment variables will be updated by the running process,
the current working directory will be switched to service's directory,
(invalid/unknown)&<#route>, and the service with be executed according to the current
working settings assigned to (factor-local/parameter)&<#Configuration.execute.Parameters.self[self]>.

A call to (factor-local/method)&<#Configuration.load[load]> prior to running this is often reasonable.


[ Configuration >> create ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`168 2 179 68`
(signature)`create(self)`

Create the service directory and initialize many of the configuration files.


[ Configuration >> exists ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`181 2 186 39`
(signature)`exists(self)`

Whether or not the service directory exists.


[ Configuration >> isconsistent ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`188 2 208 13`
(signature)`isconsistent(self)`

Whether the stored configuration has the necessary
on-disk structure for supporting a rootd Service.


[ Configuration >> load ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`210 2 217 22`
(signature)`load(self)`

Load the service definition from the filesystem.


[ Configuration >> store ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`219 2 227 24`
(signature)`store(self)`

Store the service definition to the filesystem.


[ Configuration >> load_abstract ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`229 2 231 62`
(signature)`load_abstract(self)`


[ Configuration >> store_abstract ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`233 2 235 44`
(signature)`store_abstract(self)`


[ Configuration >> load_invocation ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`237 2 244 25`
(signature)`load_invocation(self)`


[ Configuration >> store_invocation ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`246 2 253 38`
(signature)`store_invocation(self)`


[ Configuration >> load_actuation ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`255 2 258 39`
(signature)`load_actuation(self)`


[ Configuration >> store_actuation ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`260 2 265 10`
(signature)`store_actuation(self)`


[ Configuration >> actuates ]
! CONTROL:
	/type/
		property
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`266 2 276 17`
		- (type/syntax)`bool`
		- (type/invalid/unknown)&<#bool>
		

[ Configuration >> actuates ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`277 2 284 25`
(signature)`actuates(self, val)`


[ Configuration >> load_pid ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`286 2 288 41`
(signature)`load_pid(self)`


[ Configuration >> store_pid ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`290 2 292 53`
(signature)`store_pid(self)`

