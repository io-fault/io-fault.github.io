[["Functions and types for representing text as cells."], ["Recognize Character Units from an iterator of codepoints using &Cells.", "", "Identification of Character Units is performed by analyzing the cell usage of", "contiguous codepoints. When a change in cell usage occurs, presume that", "a new Character Unit has begun. However, do so while considering", "Variant Selector, ZWJ Sequence, and Regional Indicator exceptions.", "", "! WARNING:", "\tZWJ sequences are nearly presumed to be emoji sequences;", "\tthe maximum cell count of the codepoints in the sequence determines", "\tthe reported cells. While this may yield the correct alignment", "\toutside of emoji, there are cases where a join intends to represent", "\ttwo character units in which the identified maximum will be incorrect.", "", "[ Parameters ]", "/Cells/", "\tThe function identifying the width of a character.", "/ci/", "\tIterable of unicode characters.", "/ctlsize/", "\tCell count to assign to low-ascii control characters.", "/tabsize/", "\tCell count to assign to tab characters.", "", "[ Regional Indicators ]", "Currently uses range checks. If (python/keyword)`match` ever implements", "jump tables for constants, the following template can be used to generate", "the or-list.", "", "#!syntax/python", "\tri_offset = 0x1F1E6", "\tri_codes = [", "\t\t(hex((x - ord('a')) + ri_offset))[2:].upper()", "\t\tfor x in range(ord('a'), ord('z'))", "\t]", "\tfor p in ri_codes[0::4], ri_codes[1::4], ri_codes[2::4], ri_codes[3::4]:", "\t\tprint('\"' + '\" | \"\\U000'.join(p) + '\" | \\')"], ["Group Character Units by the cell usage rate. Exceptions given to already plural", "strings which expect to be treated as units.", "", "Processes the &graphemes generator into cell counts and string pairs providing", "the critical parameters for &.types.Words and &.types.Unit instances.", "", "[ Parameters ]", "/gi/", "\tIterator producing codepoint expression and cell count pairs.", "", "[ Returns ]", "Iterator of cells and strings where negative cell counts indicate a", "a sole Character Unit.", "", "The integer and string positions are swapped in order to be consistent", "with &.types.Words order."], ["&Phrase segments identifying the cell count of the word text", "and the &Glyph frame that should be used to style the text."], ["The codepoints per character units.", "Normally `1`. Codepoint length for &Unit and &Redirect."], ["Number of cells required to display a *character unit* of the word text."], ["The traits and colors to use when rendering the text."], ["Split the word at the given codepoint offset, &whence."], ["Number of cells required to display the word text.", "", "This measurement is stored alongside of the string that will be rendered.", "It is possible, if not likely, that this override be respected above", "a system's `wcswidth` implementation."], ["Translate word relative codepoint offset to word relative cell offset."], ["Translate the word relative &celloffset to the word relative codepoint offset."], ["The number of character units in the &codepoints."], ["Translate word relative codepoint offset to word relative character unit offset."], ["Translate word relative Character Unit offset into word relative codepoint offset."], ["Number of codepoints used to represent the words' text.", "", "This is equivalent to `len(Words(...).text)`, but", "offers a point of abstraction in, very unlikely, implementation changes."], ["The codepoint offset; returns &codeoffset."], ["Translate the word relative &codepoint offset to the word relative codepoint offset.", "A reflective mapping, but bind the returned offset to the word's range returning", "overflow or underflow as the remainder."], ["Words representing a single character unit composed from a", "unicode codepoint expression. Expressions being regional indicator", "pairs, emoji ZWJ sequences, and Variant Selector qualified codepoints.", "", "Unit words provides the necessary compensation for inconsistent &Words.cellrate."], ["Maintain &Words.split interface, but always return a tuple with a sole element."], ["A &Unit that explicitly remaps its display text.", "Used to control the transmitted representations of control characters and indentation."], ["A sequence &Words providing translation interfaces for codepoints, cells, and character", "units."], ["Generate the cells that would represent the words of the phrase."], ["Select the appropriate &Words class for containing the &text.", "Order of parameters is intended to support &from_segmentation."], ["The text content of the phrase.", "May not be consistent with what is sent to a display in &Redirect cases."], ["Word specification consisting of a single space."], ["Create a new Phrase from &phrases by placing &self between each &Phrase instance", "in &phrases."], ["Combine word specifications with identical attributes(styles).", "Returns a new &Phrase instance with any redundant word attributes eliminated."], ["Number of cells that the phrase will occupy."], ["Number of character units contained by the phrase."], ["Construct an iterator to the concrete words for creating a new &Phrase", "instance that is in reversed form of the words in &self.", "`assert phrase == Phrase(Phrase(phrase.reverse()).reverse())`"], ["Extract the subphrase at the given cell offsets."], ["Extract the subphrase at the given indexes.", "", "[ Parameters ]", "/adjust/", "\tCallable that changes the text properties of the selected words.", "\tDefaults to no change."], ["Find the word offset and codepoint offset for the unit &offset", "relative to &whence.", "The &offset is traversed using &ulength, &uoffset, and &uindex."], ["Align the position to the beginning of the next word given", "that the character index is at the end of the word", "and that there is a following word. If realignment is not", "possible, return &position."], ["Align the position to the end of the previous word given", "that the character index is at the start of the word", "and that there is a previous word. If realignment is not", "possible, return &position."], ["Split the phrase at the given position, &whence."], ["Identify the absolute unit offset for the given phrase position.", "", "[ Parameters ]", "/position/", "\tThe Word-Codepoint offset pair being described."]]