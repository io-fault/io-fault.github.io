! CONTROL:
	/type/
		module
	/element/
		- (control)`property-set`
		- (source/area)`1 1 51 0`
Construction Context resolution support.


[ os ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`4 1 4 9`

[ Iterator ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`5 1 5 36`

[ files ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`7 1 7 30`

[ query ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`8 1 8 24`

[ select ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`10 1 38 32`
		- (type/syntax)`tuple[str, files.Path]`
		
(signature)`select(local)`

Generate the possible locations of construction contexts.
Usually, the first existing path should be used.

Some entries will only be present when a required environment variable
is present and not an empty string. Existence must be checked by caller:

#!syntax/python
	[x for x in context.select(...) if x[1].fs_type() == 'directory']
	
The first element of the tuples is a string describing the origin of the path.


[ resolve ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`40 1 51 30`
		- (type/syntax)`tuple[str, files.Path]`
		
(signature)`resolve()`

Use (factor-local/function)&<#select[select]> to find the highest priority construction context whose directory
exists on the filesystem. The identified path is not verified to conform
to a protocol so subsequent checks may be required.

