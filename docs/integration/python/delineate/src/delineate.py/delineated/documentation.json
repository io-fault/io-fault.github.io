[["Delineate a Python source file."], ["Read the identifiers from an attribute series terminated with a name."], ["Retrieve the constants from the expression.", "Expressions within &v that are not simple containers are", "handled by referring to the source.", "", "[ Parameters ]", "/ctx/", "\tThe node fragment containing the expression, &v.", "/v/", "\tExpression."], ["Expression container providing higher-level access to the properties of a node", "with respect to that node's context path."], ["Get decorators from the node's (id)`decorator_list` field that", "are simple names."], ["Access the source lines from the root Fragment containing the module."], ["Retrieve the named ancestor of the fragment."], ["Construct a fragment path to the node using &ancestor."], ["Select the node's syntax from the reference's &source."], ["Create a fragment using &self as the new fragment's context."], ["Iterate over the nodes contained within the body of this fragment", "and yield &Fragment instances."], ["Retrieve the area and value of an assignment expression along with its name."], ["Retrieve the area and value of an assignment expression along with its name."], ["Retrieve the normalized string contents of the first expression in &node."], ["Extraction selector state."], ["Construct an element type node from the annotation of the &fragment."], ["Construct an element type node from a class' base expression."]]