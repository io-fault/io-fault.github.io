[["XML serialization for Python factors."], ["Delineation extraction context for Python.", "", "Manages the XML serialization Context and Cursor extracting", "the fragments of a module."], ["Given an import route, return the context package", "and the project module."], ["Determine if the given object is a class method."], ["Determine if the given object is a property.", "Get-Set Descriptors are also identified as properties."], ["Overrideable interface to &inspect.ismodule."], ["The given object is a plainly defined class that belongs to the module."], ["The given object is a plainly defined function that belongs to the module."], ["Variant of &inspect.getdoc that favors tab-indentations."], ["Whether the object is independently addressable.", "Specifically, it is a module or inspect.getmodule() not return None", "*and* can `obj` be found within the module's objects.", "", "The last condition is used to prevent broken links."], ["Given an arbitrary module name, rewrite it to use the canonical", "name defined by the package set (package of Python packages).", "", "If there is no canonical package name, return &name exactly."], ["Return the address of the given object; &None if unknown."], ["Decide the module's origin; local to the documentation site, Python's", "site-packages (distutils), or a Python builtin."], ["Return the project information about a particular module.", "", "Returns `None` if a builtin, an unregistered package, or package without a project", "module relative to the floor."], ["Construct an interator emitting an XML Fragments document."]]