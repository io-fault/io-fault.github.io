! CONTROL:
	/type/
		module
	/element/
		- (control)`property-set`
		- (source/area)`1 1 240 0`
		- (coverage-zeros)`0`
		- (coverage-counters)`0`
Coverage and profiling data collection.

! WARNING:
	(factor-local/class)&<#Collector[Collector]> instances *must* be per-thread in order for (factor-local/function)&<#measure[measure]> to
	properly calculate call timings.

Common usage:

#!syntax/python
	collector, events = trace.prepare()
	with collector:
		...
	aggregate = trace.measure(events)
	
[ Engineering ]

- Refactor (factor-local/function)&<#measure[measure]> as a stateful method that can be called during collection
	in order to reduce memory consumption during long runs.
- Make use of interjection in order to perform collection maintenance
	for (factor-local/function)&<#measure[measure]>; cancel collection, run measure, serialize new data(?), resume.

[ Properties ]

/Measurements/
	A tuple of measured trace data.


[ sys ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`28 1 28 10`

[ collections ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`29 1 29 18`

[ functools ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`30 1 30 16`

[ typing ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`31 1 31 13`

[ event_integers ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`34 1 43 1`
#!source
	event_integers = {
		'call': 0,
		'exception': 1,
		'line': 2,
		'return': 3,
	
		'c_call': 4,
		'c_exception': 5,
		'c_return': 6,
	}

[ Collector ]
! CONTROL:
	/type/
		class
	/element/
		- (control)`property-set`
		- (source/area)`45 1 95 15`
! INHERIT:
	- (control)`property-set`
	- (source/area)`45 17 45 22`
	- (type/syntax)`object`
	- (type/invalid/unknown)&<#object>
	
Python collector.


[ Collector >> __init__ ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`50 2 53 72`
(signature)`__init__(self, endpoint, time_delta)`


[ Collector >> _collect ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`56 2 72 22`
(signature)`_collect(self, append, time_delta, frame, event, arg)`


[ Collector >> __call__ ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`74 2 77 29`
(signature)`__call__(self, *args)`


[ Collector >> subscribe ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`79 2 83 20`
(signature)`subscribe(self)`

Subscribe to all events.


[ Collector >> cancel ]
! CONTROL:
	/type/
		method
	/element/
		- (control)`property-set`
		- (source/area)`85 2 89 20`
(signature)`cancel(self)`

Cancel the collection of data in the current thread.


[ Collector >> __enter__ ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`91 2 92 18`
(signature)`__enter__(self)`


[ Collector >> __exit__ ]
! CONTROL:
	/type/
		method
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`94 2 95 15`
(signature)`__exit__(self, *args)`


[ sequence ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`97 1 107 1`
#!source
	sequence = (
		'total',
		'count',
		'minimum',
		'maximum',
		'median',
		'average',
		'distance',
		'variance',
		'modes',
	)

[ prepare ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`109 1 134 25`
		- (type/syntax)`typing.Tuple[Collector, typing.Sequence]`
		
(signature)`prepare()`

Construct trace event collection using a (invalid/unknown)&<#list> instance
as the destination. This is the primary entry point for this module and should
be used to create the necessary per-thread (factor-local/parameter)&<#prepare.Parameters.Collector[Collector]> instances.

[ > Effects ]

/product/
	Returns a pair containing the (factor-local/parameter)&<#prepare.Parameters.Collector[Collector]> instance and the events instance
	of the configured (factor-local/parameter)&<#prepare.Parameters.Sequence[Sequence]> type.


[ Measurements ]
! CONTROL:
	/type/
		data
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`136 1 139 1`
#!source
	Measurements = typing.Tuple[
		typing.Mapping[typing.Tuple, typing.Sequence],
		typing.Mapping[str, collections.Counter],
	]

[ measure ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`141 1 240 21`
		- (type/syntax)`Measurements`
		- (type/factor-local/data)&<#Measurements[Measurements]>
		
(signature)`measure(events)`

Measure line counts and call times from the collected trace data.

Coverage events and profile events should be processed here.

[ > Parameters ]

/(parameter)`events`/
	- (type/syntax)`typing.Sequence`
	- (type/none/invalid)&<http://fault.io/dev/null[typing.Sequence]>
	
	The sequence of events identified as the endpoint of a (factor-local/class)&<#Collector[Collector]> instance.
	Usually, a triple whose first key is the calling context, the second is
	the traced events, and the third is the time index.

/(parameter)`TRACE_LINE`/
	
	(control/absent)`Undocumented`.

/(parameter)`TRACE_CALL`/
	
	(control/absent)`Undocumented`.

/(parameter)`TRACE_RETURN`/
	
	(control/absent)`Undocumented`.

/(parameter)`TRACE_EXCEPTION`/
	
	(control/absent)`Undocumented`.

/(parameter)`TRACE_C_CALL`/
	
	(control/absent)`Undocumented`.

/(parameter)`TRACE_C_RETURN`/
	
	(control/absent)`Undocumented`.

/(parameter)`TRACE_C_EXCEPTION`/
	
	(control/absent)`Undocumented`.

/(parameter)`IntegerSequence`/
	
	(control/absent)`Undocumented`.

/(parameter)`deque`/
	
	(control/absent)`Undocumented`.

/(parameter)`defaultdict`/
	
	(control/absent)`Undocumented`.

/(parameter)`Counter`/
	
	(control/absent)`Undocumented`.

[ > Return ]

A pair consisting of the exact call times, cumulative and resident, and the line counts.

Each item in the tuple is a mapping. The line counts is a two-level mapping
keyed with the filename followed with the line number. The line number is a key
to a (none/invalid)&<http://fault.io/dev/null[collections.Counter]> instance. The exact timings is a mapping whose keys
are tuples whose contents are the calling context of the time measurements. The
value of the mapping is a sequence of pairs describing the cumulative and resident
times of the call context (key).

