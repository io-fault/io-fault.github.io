(* "Vectorized Distincts" "...")
(#4 x)

. = select/read
: = define/write
((:symbol value) struct)[struct.type]
((.path.to.var.symbol: value) struct)

(.var: value)(struct.path.to)
(struct.path.to: (field:value field-2:value2)).path.to

reconstruction: (expression)
transformation:
	-> parameter[]
	<- (expression parameter)
	<- 0

reconstruction:
	-> struct
	-> new-value-1
	-> new-value-2
	<- (struct:
		multiple.levels:
			attribute: 1
		new: new-value-1
		path:
			to:
				field-udpate: new-value-2
	)

((:value (* .path .another.path)) struct)

y = struct.path

k:
	-> *y
	<- (#4 y)

s:
	-> x[]
	-> y[]
	-> z[] = x * y

div:
	-> dividend
	-> divisor
	<- (.y (s z:dividend x:divisor))

division: .y (s x:4)
z.y = 2

f:
	-> parameter[{CompileTimeTypes Constant}]
	<- (# #(*2 1 2 3 4 5) (# 5 4 3 2 1))
	(*2 ^(#1 1 2 3 4))

branch:
	-> v[Integer]: 2
	<- v[] >> 0
	<- v[10 -> 20] / 2 10<>20 10<-20 10-20
	<- v[2] >> 99

normalize: (-1)
	-> v[Text]
	<- y
	<- 123 == (v[] >> 123)
	<- v[! 'token-1'] >> unmatched case
	<- v['token-1'] >> 0
	<- v['token-2'] >> 1
	<> y = 4 << v['token-3']['token-5']
	<> z = y * 3
	<- v[] >> -2

{enum (
	sym-1,
	sym-2,
	sym-3,
)}

(normalize 'token-3') => (4)
(normalize 'token-1') => (0)
(normalize 'value') => (123)
((= -1) normalize 'unknown-token') => (-1)
