! CONTROL:
	/type/
		module
	/element/
		- (control)`property-set`
		- (source/area)`1 1 86 0`
		- (coverage-zeros)`0`
		- (coverage-counters)`0`
Compile and archive text factors.


[ sys ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`4 1 4 10`

[ importlib ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`5 1 5 16`

[ process ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`7 1 7 32`

[ files ]
! CONTROL:
	/type/
		import
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`8 1 8 30`

[ replicate ]
! CONTROL:
	/type/
		function
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`10 1 12 28`
(signature)`replicate(target, origin)`


[ archive ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`14 1 18 26`
(signature)`archive(output, source)`

Copy the units directory, (factor-local/parameter)&<#archive.Parameters.source[source]>, to the target image location (factor-local/parameter)&<#archive.Parameters.output[output]>.


[ delineate ]
! CONTROL:
	/type/
		function
	/element/
		- (control)`property-set`
		- (source/area)`20 1 68 24`
(signature)`delineate(output, source)`

Parse kleptic text and serialize its element tree as JSON.


[ main ]
! CONTROL:
	/type/
		function
	/flags/
		- `undocumented`
	/element/
		- (control)`property-set`
		- (source/area)`70 1 86 19`
		- (type/syntax)`process.Exit`
		- (type/remote/factor-element)&<http://fault.io/python/system/process#Exit[fault.system.process.Exit]>
		
(signature)`main(inv)`

